{
  "name": "用动画和实战打开 React Hooks",
  "id": "870a7b7da39c3a83aba08cbbe5840859",
  "created": "2020-04-08T02:52:36.227Z",
  "github": "https://github.com/tuture-dev/covid-19-with-hooks",
  "articles": [
    {
      "name": "用动画和实战打开 React Hooks（一）：useState 和 useEffect",
      "id": "870a7b7da39c3a83aba08cbbe5840859",
      "description": "自从 React 16.8 发布之后，它带来的 React Hooks 在前端圈引起了一场无法逆转的风暴。React Hooks 为函数式组件提供了无限的功能，解决了类组件很多的固有缺陷。这篇教程将带你快速熟悉并掌握最常用的两个 Hook：useState 和 useEffect。在了解如何使用的同时，还能管窥背后的原理，顺便实现一个 COVID-19（新冠肺炎）可视化应用。",
      "topics": [
        "React",
        "React Hooks"
      ],
      "cover": "https://imgkr.cn-bj.ufileos.com/7425c4bd-a180-4b4f-8c01-350c639d1dff.png"
    }
  ],
  "steps": [
    {
      "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
      "id": "w6NXzMQlF",
      "articleId": "870a7b7da39c3a83aba08cbbe5840859",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "id": "53Eh-cF1RM",
          "fixed": true,
          "children": [
            {
              "text": "起步"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "前提条件"
                }
              ],
              "id": "8cwgD4zgK"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在阅读这篇教程之前，希望你已经做了如下准备："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "掌握了 React 基础知识，例如组件、JSX、状态等等，如果你不了解的话，请先学习"
                    },
                    {
                      "text": "《一杯茶的时间，上手 React 框架》",
                      "link": true,
                      "url": "https://tuture.co/2019/11/18/07acf61/"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "配置好 Node 环境，可参考"
                    },
                    {
                      "text": "《一杯茶的时间，上手 Node.js》",
                      "link": true,
                      "url": "https://tuture.co/2019/12/03/892fa12/"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "为什么会有 Hooks？"
                }
              ],
              "id": "UmOfZY4kh"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在 Hooks 出现之前，类组件和函数组件的分工一般是这样的："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "类组件",
                      "bold": true
                    },
                    {
                      "text": "提供了完整的状态管理和生命周期控制，通常用来承接复杂的业务逻辑，被称为"
                    },
                    {
                      "text": "“聪明组件”",
                      "italic": true
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "函数组件",
                      "bold": true
                    },
                    {
                      "text": "则是纯粹的从数据到视图的映射，对状态毫无感知，因此通常被称为“"
                    },
                    {
                      "text": "傻瓜组件",
                      "italic": true
                    },
                    {
                      "text": "”"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "有些团队还制定了这样的 React 组件开发约定："
                }
              ]
            },
            {
              "type": "block-quote",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "有状态的组件没有渲染，有渲染的组件没有状态。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "那么 Hooks 的出现又是为了解决什么问题呢？我们可以试图总结一下类组件颇具代表性的"
                },
                {
                  "text": "痛点",
                  "bold": true
                },
                {
                  "text": "："
                }
              ]
            },
            {
              "type": "numbered-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "令人头疼的 "
                    },
                    {
                      "text": "this",
                      "code": true
                    },
                    {
                      "text": " 管理，容易引入难以追踪的 Bug"
                    }
                  ],
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 1
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "生命周期的划分并不符合“内聚性”原则，例如 "
                    },
                    {
                      "text": "setInterval",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "clearInterval",
                      "code": true
                    },
                    {
                      "text": " 这种具有强关联的逻辑被拆分在不同的生命周期方法中"
                    }
                  ],
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 2
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "组件复用（数据共享或功能复用）的困局，从早期的 Mixin，到"
                    },
                    {
                      "text": "高阶组件（HOC）",
                      "link": true,
                      "url": "https://zh-hans.reactjs.org/docs/higher-order-components.html"
                    },
                    {
                      "text": "，再到 "
                    },
                    {
                      "text": "Render Props",
                      "link": true,
                      "url": "https://zh-hans.reactjs.org/docs/render-props.html"
                    },
                    {
                      "text": "，始终没有一个清晰直观又便于维护的组件复用方案"
                    }
                  ],
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 3
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "没错，随着 Hooks 的推出，这些痛点都成为了历史！"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "为什么要写这一系列 Hooks 教程？"
                }
              ],
              "id": "hju3-l-SN"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如何快速学习并掌握 React Hooks 一直是困扰很多新手或者老玩家的一个问题，而笔者在日常的学习和开发中也发现了以下头疼之处："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "React 官方文档对 Hooks 的讲解偏应用，对原理的阐述一笔带过"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "讲 React Hooks 的优秀文章很多，但大多专注于讲解一两个 Hook，要想一网打尽有难度"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "看了很多使用方法甚至源码分析，但是没法和具体的使用场景对应起来，不了解怎么在实际开发中灵活运用"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果你也有同样的困惑，希望这一系列文章能帮助你拨开云雾，让 Hooks 成为你的称手兵器。我们将通过一个完整的 COVID-19 数据可视化项目，结合 Hooks 的动画原理讲解，让你真正地精通 React Hooks！"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "说实话，Hooks 的知识点相当分散，就像游乐园的游玩项目一样，选择一条完美的路线很难。但是不管怎么样，希望在接下来的旅程中，你能玩得开心😊！"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "初始化项目"
                }
              ],
              "id": "jet0ZYrC-"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "首先，通过 Create React App（以下简称 CRA） 初始化项目："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "npx create-react-app covid-19-with-hooks"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在少许等待之后，进入项目。"
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们所有的数据源自 "
                    },
                    {
                      "text": "NovelCOVID 19 API",
                      "link": true,
                      "url": "https://corona.lmao.ninja/docs/#/"
                    },
                    {
                      "text": "，可以点击访问其全部的 API 文档。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": ".gitignore",
          "display": false,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": ".gitignore",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "README.md",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "README.md",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "package.json",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package.json",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "public/favicon.ico",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/favicon.ico",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "public/index.html",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/index.html",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "public/logo192.png",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/logo192.png",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "public/logo512.png",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/logo512.png",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "public/manifest.json",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/manifest.json",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "public/robots.txt",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/robots.txt",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.css",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.css",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.js",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.js",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.test.js",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.test.js",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/index.css",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/index.css",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/index.js",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/index.js",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/logo.svg",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/logo.svg",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/serviceWorker.js",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/serviceWorker.js",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/setupTests.js",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/setupTests.js",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "yarn.lock",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "yarn.lock",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "一切就绪，让我们出发吧！"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "d3959380bd3c26faacb5d9ff48e7dcfa27f37f1d",
      "id": "8WKNQED4Nh",
      "articleId": "870a7b7da39c3a83aba08cbbe5840859",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "d3959380bd3c26faacb5d9ff48e7dcfa27f37f1d",
          "id": "ujaGivVg4e",
          "fixed": true,
          "children": [
            {
              "text": "useState + useEffect：初来乍到"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "首先，让我们从最最最常用的两个 Hooks 说起："
                },
                {
                  "text": "useState",
                  "code": true
                },
                {
                  "text": " 和 "
                },
                {
                  "text": "useEffect",
                  "code": true
                },
                {
                  "text": " 。很有可能，你在平时的学习和开发中已经接触并使用过了（当然如果你刚开始学也没关系啦）。不过在此之前，我们先熟悉一下 React 函数式组件的运行过程。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "理解函数式组件的运行过程"
                }
              ],
              "id": "6Q1Fo7fuJ"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们知道，Hooks "
                },
                {
                  "text": "只能用于 React 函数式组件",
                  "bold": true
                },
                {
                  "text": "。因此理解函数式组件的运行过程对掌握 Hooks 中许多重要的特性很关键，请看下图："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://imgkr.cn-bj.ufileos.com/9a55a40e-ebd5-4ffb-9b8b-3cdd4e9161a3.gif"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，函数式组件严格遵循 "
                },
                {
                  "text": "UI = render(data)",
                  "code": true
                },
                {
                  "text": " 的模式。当我们第一次调用组件函数时，触发"
                },
                {
                  "text": "初次渲染",
                  "bold": true
                },
                {
                  "text": "；然后随着 "
                },
                {
                  "text": "props",
                  "code": true
                },
                {
                  "text": " 的改变，便会重新调用该组件函数，触发"
                },
                {
                  "text": "重渲染",
                  "bold": true
                },
                {
                  "text": "。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "你也许会纳闷，动画里面为啥要并排画三个一样的组件呢？因为我想通过这种方式直观地阐述函数式组件的一个重要思想："
                }
              ]
            },
            {
              "type": "block-quote",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "每一次渲染都是完全独立的。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "后面我们将沿用这样的风格，并一步步地介绍 Hook 在函数式组件中扮演怎样的角色。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "useState 使用浅析"
                }
              ],
              "id": "wCvwV7kl2"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "首先我们来简单地了解一下 "
                },
                {
                  "text": "useState",
                  "code": true
                },
                {
                  "text": " 钩子的使用，官方文档介绍的使用方法如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "js",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const [state, setState] = useState(initialValue);"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "其中 "
                },
                {
                  "text": "state",
                  "code": true
                },
                {
                  "text": " 就是一个状态变量，"
                },
                {
                  "text": "setState",
                  "code": true
                },
                {
                  "text": " 是一个用于修改状态的 Setter 函数，而 "
                },
                {
                  "text": "initialValue",
                  "code": true
                },
                {
                  "text": " 则是状态的初始值。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "光看代码可能有点抽象，请看下面的动画："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://imgkr.cn-bj.ufileos.com/e09f2b4d-e20d-4bad-ba62-80d860f80e9f.gif"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "与之前的纯函数式组件相比，我们引入了 "
                },
                {
                  "text": "useState",
                  "code": true
                },
                {
                  "text": " 这个钩子，瞬间就打破了之前 "
                },
                {
                  "text": "UI = render(data)",
                  "code": true
                },
                {
                  "text": " 的安静画面——函数组件居然可以"
                },
                {
                  "text": "从组件之外把状态和修改状态的函数“钩”过来",
                  "bold": true
                },
                {
                  "text": "！并且仔细看上面的动画，"
                },
                {
                  "text": "通过调用 Setter 函数，居然还可以直接触发组件的重渲染",
                  "bold": true
                },
                {
                  "text": "！"
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "你也许注意到了所有的“钩子”都指向了一个绿色的问号，我们会在下面详细地分析那是什么，现在就暂时把它看作是组件之外可以访问的一个“神秘领域”。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "结合上面的动画，我们可以得出一个重要的推论："
                },
                {
                  "text": "每次渲染具有独立的状态值",
                  "bold": true
                },
                {
                  "text": "（毕竟每次渲染都是完全独立的嘛）。也就是说，每个函数中的 "
                },
                {
                  "text": "state",
                  "code": true
                },
                {
                  "text": " 变量只是一个简单的"
                },
                {
                  "text": "常量",
                  "bold": true
                },
                {
                  "text": "，每次渲染时从钩子中获取到的常量，并没有附着数据绑定之类的神奇魔法。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这也就是老生常谈的 "
                },
                {
                  "text": "Capture Value",
                  "bold": true
                },
                {
                  "text": " 特性。可以看下面这段经典的计数器代码（来自 Dan 的"
                },
                {
                  "text": "这篇精彩的文章",
                  "link": true,
                  "url": "https://overreacted.io/a-complete-guide-to-useeffect/"
                },
                {
                  "text": "）："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "js",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function Counter() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  const [count, setCount] = useState(0);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  function handleAlertClick() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    setTimeout(() => {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      alert('You clicked on: ' + count);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    }, 3000);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    <div>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <p>You clicked {count} times</p>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <button onClick={() => setCount(count + 1)}>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        Click me"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      </button>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <button onClick={handleAlertClick}>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        Show alert"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      </button>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    </div>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  );"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "实现了上面这个计数器后（也可以直接通过这个 "
                },
                {
                  "text": "Sandbox",
                  "link": true,
                  "url": "https://codesandbox.io/s/w2wxl3yo0l"
                },
                {
                  "text": " 进行体验），按如下步骤操作：1）点击 Click me 按钮，把数字增加到 3；2）点击 Show alert 按钮；3）在 "
                },
                {
                  "text": "setTimeout",
                  "code": true
                },
                {
                  "text": " 触发之前点击 Click me，把数字增加到 5。"
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://imgkr.cn-bj.ufileos.com/ea1a3cb2-6bf5-4b5d-b7a7-1426521c1e5f.gif"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "结果是 Alert 显示 3！"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果你觉得这个结果很正常，恭喜你已经理解了 Capture Value 的思想！如果你觉得匪夷所思嘛……来简单解释一下："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "每次渲染相互独立，因此每次渲染时组件中的状态、事件处理函数等等都是独立的，或者说"
                    },
                    {
                      "text": "只属于",
                      "bold": true
                    },
                    {
                      "text": "所在的那一次渲染"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "我们在 "
                    },
                    {
                      "text": "count",
                      "code": true
                    },
                    {
                      "text": " 为 3 的时候触发了 "
                    },
                    {
                      "text": "handleAlertClick",
                      "code": true
                    },
                    {
                      "text": " 函数，这个函数"
                    },
                    {
                      "text": "所记住的",
                      "bold": true
                    },
                    {
                      "text": " "
                    },
                    {
                      "text": "count",
                      "code": true
                    },
                    {
                      "text": " 也为 3"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "三秒种后，刚才函数的 "
                    },
                    {
                      "text": "setTimeout",
                      "code": true
                    },
                    {
                      "text": " 结束，输出"
                    },
                    {
                      "text": "当时记住的",
                      "bold": true
                    },
                    {
                      "text": "结果：3"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这道理就像，你翻开十年前的日记本，虽然是现在翻开的，但记录的仍然是十年前的时光。或者说，日记本 Capture 了那一段美好的回忆。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "useEffect 使用浅析"
                }
              ],
              "id": "rri9lwi8o"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "你可能已经听说 "
                },
                {
                  "text": "useEffect",
                  "code": true
                },
                {
                  "text": " 类似类组件中的生命周期方法。但是在开始学习 "
                },
                {
                  "text": "useEffect",
                  "code": true
                },
                {
                  "text": " 之前，建议你暂时忘记生命周期模型，毕竟函数组件和类组件是不同的世界。官方文档介绍 "
                },
                {
                  "text": "useEffect",
                  "code": true
                },
                {
                  "text": " 的使用方法如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "useEffect(effectFn, deps)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "effectFn",
                  "code": true
                },
                {
                  "text": " 是一个执行某些可能具有"
                },
                {
                  "text": "副作用",
                  "bold": true
                },
                {
                  "text": "的 Effect 函数（例如数据获取、设置/销毁定时器等），它可以返回一个"
                },
                {
                  "text": "清理函数",
                  "bold": true
                },
                {
                  "text": "（Cleanup），例如大家所熟悉的 "
                },
                {
                  "text": "setInterval",
                  "code": true
                },
                {
                  "text": " 和 "
                },
                {
                  "text": "clearInterval",
                  "code": true
                },
                {
                  "text": " ："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "javascript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "useEffect(() => {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  const intervalId = setInterval(doSomething(), 1000);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return () => clearInterval(intervalId);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "});"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，我们在 Effect 函数体内通过 "
                },
                {
                  "text": "setInterval",
                  "code": true
                },
                {
                  "text": " 启动了一个定时器，随后又返回了一个 Cleanup 函数，用于销毁刚刚创建的定时器。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "OK，听上去还是很抽象，再来看看下面的动画吧："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://imgkr.cn-bj.ufileos.com/ad9b947f-77fe-43a0-bdee-a27d11246204.gif"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "动画中有以下需要注意的点："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "每个 Effect 必然在渲染之后执行，因此不会阻塞渲染，提高了性能"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "在运行每个 Effect 之前，运行前一次渲染的 Effect Cleanup 函数（如果有的话）"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "当组件销毁时，运行最后一次 Effect 的 Cleanup 函数"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "将 Effect 推迟到渲染完成之后执行是出于性能的考虑，如果你想在渲染之前执行某些逻辑（不惜牺牲渲染性能），那么可使用 "
                    },
                    {
                      "text": "useLayoutEffect",
                      "code": true,
                      "link": true,
                      "url": "https://reactjs.org/docs/hooks-reference.html#uselayouteffect"
                    },
                    {
                      "text": " 钩子，使用方法与 "
                    },
                    {
                      "text": "useEffect",
                      "code": true
                    },
                    {
                      "text": " 完全一致，只是执行的时机不同。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "再来看看 "
                },
                {
                  "text": "useEffect",
                  "code": true
                },
                {
                  "text": " 的第二个参数："
                },
                {
                  "text": "deps",
                  "code": true
                },
                {
                  "text": " （依赖数组）。从上面的演示动画中可以看出，React 会在"
                },
                {
                  "text": "每次渲染后都运行 Effect",
                  "bold": true
                },
                {
                  "text": "。而依赖数组就是用来控制是否应该触发 Effect，从而能够减少不必要的计算，从而优化了性能。具体而言，只要依赖数组中的每一项与上一次渲染相比都没有改变，那么就跳过本次 Effect 的执行。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "仔细一想，我们发现 "
                },
                {
                  "text": "useEffect",
                  "code": true
                },
                {
                  "text": " 钩子与之前类组件的生命周期相比，有两个显著的特点："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "将初次渲染（"
                    },
                    {
                      "text": "componentDidMount",
                      "code": true
                    },
                    {
                      "text": "）、重渲染（"
                    },
                    {
                      "text": "componentDidUpdate",
                      "code": true
                    },
                    {
                      "text": "）和销毁（"
                    },
                    {
                      "text": "componentDidUnmount",
                      "code": true
                    },
                    {
                      "text": "）三个阶段的逻辑用一个统一的 API 去解决"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "把相关的逻辑都放到一个 Effect 里面（例如 "
                    },
                    {
                      "text": "setInterval",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "clearInterval",
                      "code": true
                    },
                    {
                      "text": "），更突出逻辑的内聚性"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在最极端的情况下，我们可以指定 "
                },
                {
                  "text": "deps",
                  "code": true
                },
                {
                  "text": " 为空数组 "
                },
                {
                  "text": "[]",
                  "code": true
                },
                {
                  "text": " ，这样可以确保 Effect "
                },
                {
                  "text": "只会在组件初次渲染后执行",
                  "bold": true
                },
                {
                  "text": "。实际效果动画如下："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://imgkr.cn-bj.ufileos.com/bd507a8c-bf75-4e06-be79-7c027cce6955.gif"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，后面的所有重渲染都不会触发 Effect 的执行；在组件销毁时，运行 Effect Cleanup 函数。"
                }
              ]
            },
            {
              "type": "note",
              "level": "warning",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "如果你熟悉 React 的重渲染机制，那么应该可以猜到 "
                    },
                    {
                      "text": "deps",
                      "code": true
                    },
                    {
                      "text": " 数组在判断元素是否发生改变时同样也使用了 "
                    },
                    {
                      "text": "Object.is",
                      "code": true
                    },
                    {
                      "text": " 进行比较。因此一个隐患便是，当 "
                    },
                    {
                      "text": "deps",
                      "code": true
                    },
                    {
                      "text": " 中某一元素为非原始类型时（例如函数、对象等），"
                    },
                    {
                      "text": "每次渲染都会发生改变",
                      "bold": true
                    },
                    {
                      "text": "，从而失去了 "
                    },
                    {
                      "text": "deps",
                      "code": true
                    },
                    {
                      "text": " 本身的意义（条件式地触发 Effect）。我们会在接下来讲解如何规避这个困境。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/GlobalStats.js",
          "display": true,
          "commit": "d3959380bd3c26faacb5d9ff48e7dcfa27f37f1d",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "实战环节"
                    }
                  ],
                  "id": "Mgskwd6dE"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "OK，到了实战环节，我们先实现获取全球数据概况（每 5 秒重新获取一次）。创建 "
                    },
                    {
                      "text": "src/components/GlobalStats.js",
                      "code": true
                    },
                    {
                      "text": " 组件，用于展示全球数据概况，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/GlobalStats.js",
              "commit": "d3959380bd3c26faacb5d9ff48e7dcfa27f37f1d",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，"
                    },
                    {
                      "text": "GlobalStats",
                      "code": true
                    },
                    {
                      "text": " 就是一个简单的函数式组件，没有任何钩子。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.js",
          "display": true,
          "commit": "d3959380bd3c26faacb5d9ff48e7dcfa27f37f1d",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后修改 "
                    },
                    {
                      "text": "src/App.js",
                      "code": true
                    },
                    {
                      "text": " ，引入刚刚创建的 "
                    },
                    {
                      "text": "GlobalStats",
                      "code": true
                    },
                    {
                      "text": " 组件，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.js",
              "commit": "d3959380bd3c26faacb5d9ff48e7dcfa27f37f1d",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们在 "
                    },
                    {
                      "text": "App",
                      "code": true
                    },
                    {
                      "text": " 组件中，首先通过 "
                    },
                    {
                      "text": "useState",
                      "code": true
                    },
                    {
                      "text": " 钩子引入了 "
                    },
                    {
                      "text": "globalStats",
                      "code": true
                    },
                    {
                      "text": " 状态变量，以及修改该状态的函数。然后通过 "
                    },
                    {
                      "text": "useEffect",
                      "code": true
                    },
                    {
                      "text": " 钩子获取 API 数据，其中有以下需要注意的点："
                    }
                  ]
                },
                {
                  "type": "numbered-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们通过定义了一个 "
                        },
                        {
                          "text": "fetchGlobalStats",
                          "code": true
                        },
                        {
                          "text": " 异步函数并进行调用从而获取数据，而不是直接把这个 async 函数作为 "
                        },
                        {
                          "text": "useEffect",
                          "code": true
                        },
                        {
                          "text": " 的第一个参数；"
                        }
                      ],
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 1
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "创建了一个 Interval，用于每 5 秒钟重新获取一次数据；"
                        }
                      ],
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 2
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "返回一个函数，用于销毁之前创建的 Interval。"
                        }
                      ],
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 3
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "此外，第二个参数（依赖数组）为空数组，因此整个 Effect 函数只会运行一次。"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "warning",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "有时候，你也许会不经意间把 Effect 写成一个 async 函数："
                        }
                      ]
                    },
                    {
                      "type": "code-block",
                      "lang": "js",
                      "children": [
                        {
                          "type": "code-line",
                          "children": [
                            {
                              "text": "useEffect(async () => {"
                            }
                          ]
                        },
                        {
                          "type": "code-line",
                          "children": [
                            {
                              "text": "  const response = await fetch('...');"
                            }
                          ]
                        },
                        {
                          "type": "code-line",
                          "children": [
                            {
                              "text": "  // ..."
                            }
                          ]
                        },
                        {
                          "type": "code-line",
                          "children": [
                            {
                              "text": "}, []);"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "这样可以吗？"
                        },
                        {
                          "text": "强烈建议你不要这样做",
                          "bold": true
                        },
                        {
                          "text": "。"
                        },
                        {
                          "text": "useEffect",
                          "code": true
                        },
                        {
                          "text": " 约定 Effect 函数要么没有返回值，要么返回一个 Cleanup 函数。而这里 async 函数会隐式地返回一个 Promise，直接违反了这一约定，会造成不可预测的结果。"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.css",
          "display": true,
          "commit": "d3959380bd3c26faacb5d9ff48e7dcfa27f37f1d",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后附上应用的全局 CSS 文件，代码如下（直接复制粘贴即可）："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.css",
              "commit": "d3959380bd3c26faacb5d9ff48e7dcfa27f37f1d",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "通过 "
                },
                {
                  "text": "npm start",
                  "code": true
                },
                {
                  "text": " 开启项目："
                }
              ]
            },
            {
              "type": "image",
              "url": "https://imgkr.cn-bj.ufileos.com/c0e757fb-4838-4653-9ad6-9b9ddb05ee2f.png",
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "此外，你可以检查一下控制台的 Network 选项卡，应该能看到我们的应用每五秒就会发起一次请求查询最新的数据。恭喜你，成功地用 Hooks 进行了一次数据获取！"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "5614617c0a500719b5be6f66864b7688cec9bc3b",
      "id": "n6JOc9G9a-",
      "articleId": "870a7b7da39c3a83aba08cbbe5840859",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "5614617c0a500719b5be6f66864b7688cec9bc3b",
          "id": "SjEppER7xa",
          "fixed": true,
          "children": [
            {
              "text": "useState + useEffect：渐入佳境"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在上一步骤中，我们在 "
                },
                {
                  "text": "App",
                  "code": true
                },
                {
                  "text": " 组件中定义了一个 State 和 Effect，但是实际应用不可能这么简单，一般都需要多个 State 和 Effect，这时候又该怎么去理解和使用呢？"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "深入 useState 的本质"
                }
              ],
              "id": "q83Q6UL0j"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在上一节的动画中，我们看到每一次渲染组件时，我们都能通过一个神奇的钩子把状态”钩“过来，不过这些钩子从何而来我们打了一个问号。现在，是时候解开谜团了。"
                }
              ]
            },
            {
              "type": "note",
              "level": "warning",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "以下动画演示并不完全对应 React Hooks 的源码实现，但是它能很好地帮助你理解其工作原理。当然，也能帮助你去啃真正的源码。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们先来看看当组件初次渲染（挂载）时，情况到底是什么样的："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://imgkr.cn-bj.ufileos.com/af2ed210-08f7-4741-b17c-c2d4b67db3ff.gif"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "注意以下要点："
                }
              ]
            },
            {
              "type": "numbered-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "在初次渲染时，我们通过 "
                    },
                    {
                      "text": "useState",
                      "code": true
                    },
                    {
                      "text": " 定义了多个状态；"
                    }
                  ],
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 1
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "每调用一次 "
                    },
                    {
                      "text": "useState",
                      "code": true
                    },
                    {
                      "text": " ，都会在组件之外生成一条 Hook 记录，同时包括状态值（用 "
                    },
                    {
                      "text": "useState",
                      "code": true
                    },
                    {
                      "text": " 给定的初始值初始化）和修改状态的 Setter 函数；"
                    }
                  ],
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 2
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "多次调用 "
                    },
                    {
                      "text": "useState",
                      "code": true
                    },
                    {
                      "text": " 生成的 Hook 记录形成了一条"
                    },
                    {
                      "text": "链表",
                      "bold": true
                    },
                    {
                      "text": "；"
                    }
                  ],
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 3
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "触发 "
                    },
                    {
                      "text": "onClick",
                      "code": true
                    },
                    {
                      "text": " 回调函数，调用 "
                    },
                    {
                      "text": "setS2",
                      "code": true
                    },
                    {
                      "text": " 函数修改 "
                    },
                    {
                      "text": "s2",
                      "code": true
                    },
                    {
                      "text": " 的状态，不仅修改了 Hook 记录中的状态值，还即将"
                    },
                    {
                      "text": "触发重渲染",
                      "bold": true
                    },
                    {
                      "text": "。"
                    }
                  ],
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 4
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "OK，重渲染的时候到了，动画如下："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://imgkr.cn-bj.ufileos.com/799216d1-b91e-4cb6-9410-b8776ab82ff5.gif"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，在初次渲染结束之后、重渲染之前，Hook 记录链表依然存在。当我们逐个调用 "
                },
                {
                  "text": "useState",
                  "code": true
                },
                {
                  "text": " 的时候，"
                },
                {
                  "text": "useState",
                  "code": true
                },
                {
                  "text": " 便返回了 Hook 链表中存储的状态，以及修改状态的 Setter。"
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "当你充分理解上面两个动画之后，其实就能理解为什么这个 Hook 叫 "
                    },
                    {
                      "text": "useState",
                      "code": true
                    },
                    {
                      "text": " 而不是 "
                    },
                    {
                      "text": "createState",
                      "code": true
                    },
                    {
                      "text": " 了——之所以叫 "
                    },
                    {
                      "text": "use",
                      "code": true
                    },
                    {
                      "text": " ，是因为没有的时候才创建（初次渲染的时候），有的时候就直接读取（重渲染的时候）。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "通过以上的分析，我们不难发现 "
                },
                {
                  "text": "useState",
                  "code": true
                },
                {
                  "text": " 在设计方面的精巧（摘自张立理："
                },
                {
                  "link": true,
                  "url": "https://zhuanlan.zhihu.com/p/48264713",
                  "text": "对 React Hooks 的一些思考"
                },
                {
                  "text": "）："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "状态和修改状态的 Setter 函数两两配对，并且后者一定影响前者，前者只被后者影响，作为一个整体它们完全不受外界的影响"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "鼓励细粒度和扁平化的状态定义和控制，对于代码行为的可预测性和可测试性大有帮助"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "除了 "
                    },
                    {
                      "text": "useState",
                      "code": true
                    },
                    {
                      "text": " （和其他钩子），函数组件依然是实现渲染逻辑的“纯”组件，对状态的管理被 Hooks 所封装了起来"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "深入 useEffect 的本质"
                }
              ],
              "id": "UxHbsc-qd"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在对 "
                },
                {
                  "text": "useState",
                  "code": true
                },
                {
                  "text": " 进行一波深挖之后，我们再来揭开 "
                },
                {
                  "text": "useEffect",
                  "code": true
                },
                {
                  "text": " 神秘的面纱。实际上，你可能已经猜到了——同样是通过一个链表记录所有的 Hook，请看下面的演示："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://imgkr.cn-bj.ufileos.com/ebb090f8-7471-46ad-9556-b773d1910d03.gif"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "注意其中一些细节："
                }
              ]
            },
            {
              "type": "numbered-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "useState",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "useEffect",
                      "code": true
                    },
                    {
                      "text": " 在每次调用时都被添加到 Hook 链表中；"
                    }
                  ],
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 1
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "useEffect",
                      "code": true
                    },
                    {
                      "text": " 还会额外地在一个队列中添加一个等待执行的 Effect 函数；"
                    }
                  ],
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 2
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "在渲染完成后，依次调用 Effect 队列中的每一个 Effect 函数。"
                    }
                  ],
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 3
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "至此，上一节的动画中那两个“问号”的身世也就揭晓了——只不过是"
                },
                {
                  "text": "链表",
                  "bold": true
                },
                {
                  "text": "罢了！回过头来，我们想起来 React 官方文档 Rules of Hooks 中强调过一点："
                }
              ]
            },
            {
              "type": "block-quote",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "Only call hooks at the top level. 只在最顶层使用 Hook。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "具体地说，不要在循环、嵌套、条件语句中使用 Hook——因为这些动态的语句很有可能会导致每次执行组件函数时调用 Hook 的顺序不能完全一致，导致 Hook 链表记录的数据失效。具体的场景就不画动画啦，自行脑补吧~"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "不要撒谎：关于 deps 的那些事"
                }
              ],
              "id": "ALxZmndYx"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "useEffect",
                  "code": true
                },
                {
                  "text": " （包括其他类似的 "
                },
                {
                  "text": "useCallback",
                  "code": true
                },
                {
                  "text": " 和 "
                },
                {
                  "text": "useMemo",
                  "code": true
                },
                {
                  "text": " 等）都有个依赖数组（"
                },
                {
                  "text": "deps",
                  "code": true
                },
                {
                  "text": "）参数，这个参数比较有趣的一点是：指定依赖的决定权完全在你手里。你当然可以选择“撒谎”，不管什么情况都给一个空的 "
                },
                {
                  "text": "deps",
                  "code": true
                },
                {
                  "text": " 数组，仿佛在说“这个 Effect 函数什么依赖都没有，相信我”。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "然而，这种有点偷懒的做法显然会引来各种 Bug。一般来说，所使用到的 "
                },
                {
                  "text": "prop",
                  "code": true
                },
                {
                  "text": " 或者 "
                },
                {
                  "text": "state",
                  "code": true
                },
                {
                  "text": " 都应该被添加到 "
                },
                {
                  "text": "deps",
                  "code": true
                },
                {
                  "text": " 数组里面去。并且，React 官方还推出了一个专门的 "
                },
                {
                  "text": "ESLint 插件",
                  "link": true,
                  "url": "https://www.npmjs.com/package/eslint-plugin-react-hooks"
                },
                {
                  "text": "，可以帮你自动修复 "
                },
                {
                  "text": "deps",
                  "code": true
                },
                {
                  "text": " 数组（"
                },
                {
                  "text": "说实话，这个插件的自动修复有时候还是挺闹心的……",
                  "italic": true
                },
                {
                  "text": "）。"
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": ".gitignore",
          "display": false,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": ".gitignore",
              "commit": "5614617c0a500719b5be6f66864b7688cec9bc3b",
              "hiddenLines": [
                [
                  0,
                  19
                ]
              ],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "package.json",
          "display": false,
          "commit": "5614617c0a500719b5be6f66864b7688cec9bc3b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package.json",
              "commit": "5614617c0a500719b5be6f66864b7688cec9bc3b",
              "hiddenLines": [
                [
                  0,
                  6
                ]
              ],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/CountriesChart.js",
          "display": true,
          "commit": "5614617c0a500719b5be6f66864b7688cec9bc3b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "实战环节"
                    }
                  ],
                  "id": "0f94BKs5P"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "从这一步开始，我们将使用 "
                    },
                    {
                      "text": "Recharts",
                      "link": true,
                      "url": "http://recharts.org"
                    },
                    {
                      "text": " 作为可视化应用的图表库，它提供了出色的 D3 和 React 的绑定层。通过如下命令添加 "
                    },
                    {
                      "text": "recharts",
                      "code": true
                    },
                    {
                      "text": " 依赖："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "npm install recharts"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "创建 "
                    },
                    {
                      "text": "src/components/CountriesChart.js",
                      "code": true
                    },
                    {
                      "text": " ，用于展示多个国家的相关数据直方图，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/CountriesChart.js",
              "commit": "5614617c0a500719b5be6f66864b7688cec9bc3b",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/SelectDataKey.js",
          "display": true,
          "commit": "5614617c0a500719b5be6f66864b7688cec9bc3b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "创建 "
                    },
                    {
                      "text": "src/components/SelectDataKey.js",
                      "code": true
                    },
                    {
                      "text": " ，用于选择需要展示的关键指标，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/SelectDataKey.js",
              "commit": "5614617c0a500719b5be6f66864b7688cec9bc3b",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "SelectDataKey",
                      "code": true
                    },
                    {
                      "text": " 用于让用户选择以下关键指标："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "cases",
                          "code": true
                        },
                        {
                          "text": " ：累积确诊病例"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "todayCases",
                          "code": true
                        },
                        {
                          "text": " ：今日确诊病例"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "deaths",
                          "code": true
                        },
                        {
                          "text": " ：累积死亡病例"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "recovered",
                          "code": true
                        },
                        {
                          "text": " ：治愈人数"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "active",
                          "code": true
                        },
                        {
                          "text": " ：现存确诊人数"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.js",
          "display": true,
          "commit": "5614617c0a500719b5be6f66864b7688cec9bc3b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后我们在根组件 "
                    },
                    {
                      "text": "src/App.js",
                      "code": true
                    },
                    {
                      "text": " 中引入上面创建的两个组件，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.js",
              "commit": "5614617c0a500719b5be6f66864b7688cec9bc3b",
              "hiddenLines": [
                [
                  0,
                  2
                ],
                [
                  15,
                  24
                ]
              ],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到："
                    }
                  ]
                },
                {
                  "type": "numbered-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们创建了两个新的状态 "
                        },
                        {
                          "text": "countries",
                          "code": true
                        },
                        {
                          "text": " （所有国家的数据）和 "
                        },
                        {
                          "text": "key",
                          "code": true
                        },
                        {
                          "text": " （数据排序的指标，就是上面的五个）；"
                        }
                      ],
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 1
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们又通过一个 "
                        },
                        {
                          "text": "useEffect",
                          "code": true
                        },
                        {
                          "text": " 钩子进行数据获取，和之前获取全球数据类似，只不过注意我们这边第二个参数（依赖数组）是 "
                        },
                        {
                          "text": "[key]",
                          "code": true
                        },
                        {
                          "text": " ，也就是只有当 "
                        },
                        {
                          "text": "key",
                          "code": true
                        },
                        {
                          "text": " 状态改变的时候，才会调用 "
                        },
                        {
                          "text": "useEffect",
                          "code": true
                        },
                        {
                          "text": " 里面的函数。"
                        }
                      ],
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 2
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后使用之前创建的两个子组件，传入相应的数据和回调函数。"
                        }
                      ],
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 3
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "yarn.lock",
          "display": false,
          "commit": "5614617c0a500719b5be6f66864b7688cec9bc3b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "yarn.lock",
              "commit": "5614617c0a500719b5be6f66864b7688cec9bc3b",
              "hiddenLines": [
                [
                  0,
                  1575
                ],
                [
                  1584,
                  2958
                ],
                [
                  2970,
                  3484
                ],
                [
                  3496,
                  3799
                ],
                [
                  3811,
                  4131
                ],
                [
                  4201,
                  4249
                ],
                [
                  4261,
                  4458
                ],
                [
                  4472,
                  7314
                ],
                [
                  7326,
                  7344
                ],
                [
                  7363,
                  7432
                ],
                [
                  7444,
                  9379
                ],
                [
                  9388,
                  9497
                ],
                [
                  9506,
                  9612
                ],
                [
                  9634,
                  9687
                ],
                [
                  9714,
                  9795
                ],
                [
                  9826,
                  9834
                ],
                [
                  9857,
                  10073
                ]
              ],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "把项目跑起来，可以看到直方图显示了前十个国家的数据，并且可以修改排序的指标（比如可以从默认的累积确诊 "
                },
                {
                  "text": "cases",
                  "code": true
                },
                {
                  "text": " 切换成死亡人数 "
                },
                {
                  "text": "deaths",
                  "code": true
                },
                {
                  "text": " ）："
                }
              ]
            },
            {
              "type": "image",
              "url": "https://imgkr.cn-bj.ufileos.com/da72e057-92c4-4215-ab8f-59355ca160df.gif",
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "看上去挺不错的！"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "到这里，本系列第一篇也就讲完啦，希望你真正理解了 "
                },
                {
                  "text": "useState",
                  "code": true
                },
                {
                  "text": " 和 "
                },
                {
                  "text": "useEffect",
                  "code": true
                },
                {
                  "text": " ——最最最常用的两个 Hook。在下一篇教程中，我们将继续讲解自定义 Hook 和 "
                },
                {
                  "text": "useCallback",
                  "code": true
                },
                {
                  "text": " ，敬请期待。"
                }
              ]
            },
            {
              "type": "heading-two",
              "children": [
                {
                  "text": "参考资料"
                }
              ],
              "id": "mj2Lz1HlB"
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "React 官方文档",
                      "link": true,
                      "url": "https://reactjs.org/"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Robin Wieruch："
                    },
                    {
                      "link": true,
                      "url": "https://www.robinwieruch.de/react-hooks-fetch-data",
                      "text": "How to fetch data with React Hooks?"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Dan Abramov："
                    },
                    {
                      "link": true,
                      "url": "https://overreacted.io/a-complete-guide-to-useeffect/",
                      "text": "A Complete Guide to useEffect"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Dan Abramov："
                    },
                    {
                      "link": true,
                      "url": "https://overreacted.io/how-are-function-components-different-from-classes/",
                      "text": "How Are Function Components Different from Classes?"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Rudi Yardley："
                    },
                    {
                      "link": true,
                      "url": "https://medium.com/@ryardley/react-hooks-not-magic-just-arrays-cd4f1857236e",
                      "text": "React hooks: not magic, just arrays"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Eytan Manor："
                    },
                    {
                      "link": true,
                      "url": "https://medium.com/the-guild/under-the-hood-of-reacts-hooks-system-eb59638c9dba",
                      "text": "Under the hood of React’s hooks system"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "衍良："
                    },
                    {
                      "link": true,
                      "url": "https://zhuanlan.zhihu.com/p/92211533",
                      "text": "React Hooks 完全上手指南"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "张立理："
                    },
                    {
                      "link": true,
                      "url": "https://zhuanlan.zhihu.com/p/48264713",
                      "text": "对 React Hooks 的一些思考"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "20de81a9f805666a8344c0ec4c4f12ce07dd24b8",
      "id": "Ag50v9VMg_",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "20de81a9f805666a8344c0ec4c4f12ce07dd24b8",
          "id": "aZReEOukqU",
          "fixed": true,
          "children": [
            {
              "text": "自定义 Hook：量身定制"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "接下来，我们想要继续实现历史数据的展示。在正式开工之前，我们突然想起了"
                }
              ]
            }
          ]
        },
        {
          "file": "src/hooks/useCoronaAPI.js",
          "display": true,
          "commit": "20de81a9f805666a8344c0ec4c4f12ce07dd24b8",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们开始实现一个自定义 Hook，名为 "
                    },
                    {
                      "text": "useCoronaAPI",
                      "code": true
                    },
                    {
                      "text": " ，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/hooks/useCoronaAPI.js",
              "commit": "20de81a9f805666a8344c0ec4c4f12ce07dd24b8",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.js",
          "display": true,
          "commit": "20de81a9f805666a8344c0ec4c4f12ce07dd24b8",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后在根组件 "
                    },
                    {
                      "text": "src/App.js",
                      "code": true
                    },
                    {
                      "text": " 中使用刚刚创建的 "
                    },
                    {
                      "text": "useCoronaAPI",
                      "code": true
                    },
                    {
                      "text": " 钩子，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.js",
              "commit": "20de81a9f805666a8344c0ec4c4f12ce07dd24b8",
              "hiddenLines": [
                [
                  3,
                  6
                ],
                [
                  50,
                  55
                ]
              ],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "注意到，由于我们没有在钩子中对数据进行处理（取前十个国家的数据），因此需要在传入 "
                    },
                    {
                      "text": "CountriesChart",
                      "code": true
                    },
                    {
                      "text": " 组件时通过 "
                    },
                    {
                      "text": "slice",
                      "code": true
                    },
                    {
                      "text": " 方法处理一下。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "整个 "
                    },
                    {
                      "text": "App",
                      "code": true
                    },
                    {
                      "text": " 组件变得清晰了很多，不是吗？"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "但是当我们满怀期待地把应用跑起来，却发现整个应用陷入“无限请求”的怪圈中。打开 Chrome 开发者工具的 Network 选项卡，你会发现网络请求数量始终在飙升……"
                }
              ]
            },
            {
              "type": "image",
              "url": "https://imgkr.cn-bj.ufileos.com/0bac85a3-69cd-4273-8fa9-70fa8ee52ec7.gif",
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "吓得我们赶紧把网页关了。冷静下来之后，不禁沉思：这到底是为什么呢？"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "954afda05cf14c958d777f7e5cfacec9e534537a",
      "id": "9bsE2TtE_t",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "954afda05cf14c958d777f7e5cfacec9e534537a",
          "id": "4hCMn0eCGk",
          "fixed": true,
          "children": [
            {
              "text": "useCallback：定海神针"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        },
        {
          "file": "src/hooks/useCoronaAPI.js",
          "display": true,
          "commit": "954afda05cf14c958d777f7e5cfacec9e534537a",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/hooks/useCoronaAPI.js",
              "commit": "954afda05cf14c958d777f7e5cfacec9e534537a",
              "hiddenLines": [
                [
                  2,
                  3
                ],
                [
                  6,
                  12
                ],
                [
                  19,
                  20
                ],
                [
                  27,
                  28
                ]
              ],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "再次开启应用，这时候应该发现一切都回归正常了。"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "8cb0cb51e5d150fb2464c0a0fdf05b2c61dc763e",
      "id": "LLExzOBVBk",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "8cb0cb51e5d150fb2464c0a0fdf05b2c61dc763e",
          "id": "EL_6_nhQKd",
          "fixed": true,
          "children": [
            {
              "text": "useState：三进三出"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.js",
          "display": true,
          "commit": "8cb0cb51e5d150fb2464c0a0fdf05b2c61dc763e",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.js",
              "commit": "8cb0cb51e5d150fb2464c0a0fdf05b2c61dc763e",
              "hiddenLines": [
                [
                  0,
                  3
                ],
                [
                  11,
                  18
                ]
              ],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/CountriesChart.js",
          "display": true,
          "commit": "8cb0cb51e5d150fb2464c0a0fdf05b2c61dc763e",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/CountriesChart.js",
              "commit": "8cb0cb51e5d150fb2464c0a0fdf05b2c61dc763e",
              "hiddenLines": [
                [
                  0,
                  7
                ],
                [
                  16,
                  16
                ]
              ],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/HistoryChart.js",
          "display": true,
          "commit": "8cb0cb51e5d150fb2464c0a0fdf05b2c61dc763e",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/HistoryChart.js",
              "commit": "8cb0cb51e5d150fb2464c0a0fdf05b2c61dc763e",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/HistoryChartGroup.js",
          "display": true,
          "commit": "8cb0cb51e5d150fb2464c0a0fdf05b2c61dc763e",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/HistoryChartGroup.js",
              "commit": "8cb0cb51e5d150fb2464c0a0fdf05b2c61dc763e",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/utils.js",
          "display": true,
          "commit": "8cb0cb51e5d150fb2464c0a0fdf05b2c61dc763e",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/utils.js",
              "commit": "8cb0cb51e5d150fb2464c0a0fdf05b2c61dc763e",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "21c9debb9a8f24a2841ee6328429aca0759d2e6c",
      "id": "Qar7krg7jz",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "21c9debb9a8f24a2841ee6328429aca0759d2e6c",
          "id": "RuOml0NtER",
          "fixed": true,
          "children": [
            {
              "text": "useReducer + useContext：呼风唤雨"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.js",
          "display": true,
          "commit": "21c9debb9a8f24a2841ee6328429aca0759d2e6c",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.js",
              "commit": "21c9debb9a8f24a2841ee6328429aca0759d2e6c",
              "hiddenLines": [
                [
                  3,
                  8
                ],
                [
                  59,
                  59
                ]
              ],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/CountriesChart.js",
          "display": true,
          "commit": "21c9debb9a8f24a2841ee6328429aca0759d2e6c",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/CountriesChart.js",
              "commit": "21c9debb9a8f24a2841ee6328429aca0759d2e6c",
              "hiddenLines": [
                [
                  5,
                  7
                ]
              ],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/HistoryChartGroup.js",
          "display": true,
          "commit": "21c9debb9a8f24a2841ee6328429aca0759d2e6c",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/HistoryChartGroup.js",
              "commit": "21c9debb9a8f24a2841ee6328429aca0759d2e6c",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/SelectDataKey.js",
          "display": true,
          "commit": "21c9debb9a8f24a2841ee6328429aca0759d2e6c",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/SelectDataKey.js",
              "commit": "21c9debb9a8f24a2841ee6328429aca0759d2e6c",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "version": "v1",
  "remotes": [
    {
      "name": "origin",
      "refs": {
        "fetch": "https://github.com/tuture-dev/covid-19-with-hooks.git",
        "push": "https://github.com/tuture-dev/covid-19-with-hooks.git"
      }
    }
  ]
}