{
  "name": "用动画和实战打开 React Hooks",
  "id": "870a7b7da39c3a83aba08cbbe5840859",
  "created": "2020-04-08T02:52:36.227Z",
  "github": "https://github.com/tuture-dev/covid-19-with-hooks",
  "articles": [
    {
      "name": "用动画和实战打开 React Hooks（一）：useState 和 useEffect",
      "id": "870a7b7da39c3a83aba08cbbe5840859",
      "description": "自从 React 16.8 发布之后，它带来的 React Hooks 在前端圈引起了一场无法逆转的风暴。React Hooks 为函数式组件提供了无限的功能，解决了类组件很多的固有缺陷。这篇教程将带你快速熟悉并掌握最常用的两个 Hook：useState 和 useEffect。在了解如何使用的同时，还能管窥背后的原理，顺便实现一个 COVID-19（新冠肺炎）可视化应用。",
      "topics": [
        "React",
        "React Hooks"
      ],
      "categories": [
        "前端",
        "React",
        "入门"
      ],
      "cover": "https://imgkr.cn-bj.ufileos.com/7425c4bd-a180-4b4f-8c01-350c639d1dff.png"
    },
    {
      "id": "xocgOEMnq",
      "created": "2020-04-14T13:59:07.658Z",
      "name": "用动画和实战打开 React Hooks（二）：自定义 Hook 和 useCallback",
      "topics": [
        "React",
        "React Hooks"
      ],
      "categories": [
        "前端",
        "React",
        "入门"
      ],
      "cover": "https://imgkr.cn-bj.ufileos.com/daf8a0a8-30d2-417d-9b84-583b48b16bfa.png",
      "description": "在第二篇教程中，我们将手把手带你用自定义 Hook 重构之前的组件代码，让它变得更清晰、并且可以实现逻辑复用。在重构完成之后，我们陷入了组件“不断获取数据并重新渲染”的无限循环，这时候，useCallback 站了出来，如同定海神针一般拯救了我们的应用……"
    },
    {
      "id": "689bb434",
      "created": "2020-05-05T11:06:36.489Z",
      "name": "用动画和实战打开 React Hooks（三）：useReducer 和 useContext",
      "topics": [
        "React",
        "React Hooks"
      ],
      "categories": [
        "前端",
        "React",
        "入门"
      ],
      "cover": "https://imgkr.cn-bj.ufileos.com/0b43fd6d-a3a9-40d9-8ae5-3a9b4c16f55a.jpg",
      "description": "随着应用状态越来越复杂，我们迫切需要状态与数据流管理的解决方案。熟悉 React 开发的同学一定听说过 Redux，而在这篇文章中，我们将通过 useReducer + useContext 的组合实现一个简易版的 Redux。首先，我们将带你重新认识“老朋友”useState，并借此引出这篇文章的主角：Reducer 函数与 useReducer 钩子，并通过实战一步步带你理清数据流和状态管理的基本思想。"
    }
  ],
  "steps": [
    {
      "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
      "id": "w6NXzMQlF",
      "articleId": "870a7b7da39c3a83aba08cbbe5840859",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "id": "53Eh-cF1RM",
          "fixed": true,
          "children": [
            {
              "text": "起步"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "前提条件"
                }
              ],
              "id": "8cwgD4zgK"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在阅读这篇教程之前，希望你已经做了如下准备："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "掌握了 React 基础知识，例如组件、JSX、状态等等，如果你不了解的话，请先学习"
                    },
                    {
                      "text": "《一杯茶的时间，上手 React 框架》",
                      "link": true,
                      "url": "https://tuture.co/2019/11/18/07acf61/"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "配置好 Node 环境，可参考"
                    },
                    {
                      "text": "《一杯茶的时间，上手 Node.js》",
                      "link": true,
                      "url": "https://tuture.co/2019/12/03/892fa12/"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "为什么会有 Hooks？"
                }
              ],
              "id": "UmOfZY4kh"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在 Hooks 出现之前，类组件和函数组件的分工一般是这样的："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "类组件",
                      "bold": true
                    },
                    {
                      "text": "提供了完整的状态管理和生命周期控制，通常用来承接复杂的业务逻辑，被称为"
                    },
                    {
                      "text": "“聪明组件”",
                      "italic": true
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "函数组件",
                      "bold": true
                    },
                    {
                      "text": "则是纯粹的从数据到视图的映射，对状态毫无感知，因此通常被称为“"
                    },
                    {
                      "text": "傻瓜组件",
                      "italic": true
                    },
                    {
                      "text": "”"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "有些团队还制定了这样的 React 组件开发约定："
                }
              ]
            },
            {
              "type": "block-quote",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "有状态的组件没有渲染，有渲染的组件没有状态。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "那么 Hooks 的出现又是为了解决什么问题呢？我们可以试图总结一下类组件颇具代表性的"
                },
                {
                  "text": "痛点",
                  "bold": true
                },
                {
                  "text": "："
                }
              ]
            },
            {
              "type": "numbered-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "令人头疼的 "
                    },
                    {
                      "text": "this",
                      "code": true
                    },
                    {
                      "text": " 管理，容易引入难以追踪的 Bug"
                    }
                  ],
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 1
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "生命周期的划分并不符合“内聚性”原则，例如 "
                    },
                    {
                      "text": "setInterval",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "clearInterval",
                      "code": true
                    },
                    {
                      "text": " 这种具有强关联的逻辑被拆分在不同的生命周期方法中"
                    }
                  ],
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 2
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "组件复用（数据共享或功能复用）的困局，从早期的 Mixin，到"
                    },
                    {
                      "text": "高阶组件（HOC）",
                      "link": true,
                      "url": "https://zh-hans.reactjs.org/docs/higher-order-components.html"
                    },
                    {
                      "text": "，再到 "
                    },
                    {
                      "text": "Render Props",
                      "link": true,
                      "url": "https://zh-hans.reactjs.org/docs/render-props.html"
                    },
                    {
                      "text": "，始终没有一个清晰直观又便于维护的组件复用方案"
                    }
                  ],
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 3
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "没错，随着 Hooks 的推出，这些痛点都成为了历史！"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "为什么要写这一系列 Hooks 教程？"
                }
              ],
              "id": "hju3-l-SN"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如何快速学习并掌握 React Hooks 一直是困扰很多新手或者老玩家的一个问题，而笔者在日常的学习和开发中也发现了以下头疼之处："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "React 官方文档对 Hooks 的讲解偏应用，对原理的阐述一笔带过"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "讲 React Hooks 的优秀文章很多，但大多专注于讲解一两个 Hook，要想一网打尽有难度"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "看了很多使用方法甚至源码分析，但是没法和具体的使用场景对应起来，不了解怎么在实际开发中灵活运用"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果你也有同样的困惑，希望这一系列文章能帮助你拨开云雾，让 Hooks 成为你的称手兵器。我们将通过一个完整的 COVID-19 数据可视化项目，结合 Hooks 的动画原理讲解，让你真正地精通 React Hooks！"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "说实话，Hooks 的知识点相当分散，就像游乐园的游玩项目一样，选择一条完美的路线很难。但是不管怎么样，希望在接下来的旅程中，你能玩得开心😊！"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "初始化项目"
                }
              ],
              "id": "jet0ZYrC-"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "首先，通过 Create React App（以下简称 CRA） 初始化项目："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "npx create-react-app covid-19-with-hooks"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在少许等待之后，进入项目。"
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们所有的数据源自 "
                    },
                    {
                      "text": "NovelCOVID 19 API",
                      "link": true,
                      "url": "https://corona.lmao.ninja/docs/#/"
                    },
                    {
                      "text": "，可以点击访问其全部的 API 文档。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": ".gitignore",
          "display": false,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": ".gitignore",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "README.md",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "README.md",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "package.json",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package.json",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "public/favicon.ico",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/favicon.ico",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "public/index.html",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/index.html",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "public/logo192.png",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/logo192.png",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "public/logo512.png",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/logo512.png",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "public/manifest.json",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/manifest.json",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "public/robots.txt",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/robots.txt",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.css",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.css",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.js",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.js",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.test.js",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.test.js",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/index.css",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/index.css",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/index.js",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/index.js",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/logo.svg",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/logo.svg",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/serviceWorker.js",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/serviceWorker.js",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/setupTests.js",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/setupTests.js",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "yarn.lock",
          "display": false,
          "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "yarn.lock",
              "commit": "f55f8b7dcd7984fafcb451d3b50e2e89b1450685",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "一切就绪，让我们出发吧！"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "5d8232d260cfb7e1885575ce1513d3f07d662a30",
      "id": "8WKNQED4Nh",
      "articleId": "870a7b7da39c3a83aba08cbbe5840859",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "5d8232d260cfb7e1885575ce1513d3f07d662a30",
          "id": "ujaGivVg4e",
          "fixed": true,
          "children": [
            {
              "text": "useState + useEffect：初来乍到"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "首先，让我们从最最最常用的两个 Hooks 说起："
                },
                {
                  "text": "useState",
                  "code": true
                },
                {
                  "text": " 和 "
                },
                {
                  "text": "useEffect",
                  "code": true
                },
                {
                  "text": " 。很有可能，你在平时的学习和开发中已经接触并使用过了（当然如果你刚开始学也没关系啦）。不过在此之前，我们先熟悉一下 React 函数式组件的运行过程。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "理解函数式组件的运行过程"
                }
              ],
              "id": "6Q1Fo7fuJ"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们知道，Hooks "
                },
                {
                  "text": "只能用于 React 函数式组件",
                  "bold": true
                },
                {
                  "text": "。因此理解函数式组件的运行过程对掌握 Hooks 中许多重要的特性很关键，请看下图："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://imgkr.cn-bj.ufileos.com/9a55a40e-ebd5-4ffb-9b8b-3cdd4e9161a3.gif"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，函数式组件严格遵循 "
                },
                {
                  "text": "UI = render(data)",
                  "code": true
                },
                {
                  "text": " 的模式。当我们第一次调用组件函数时，触发"
                },
                {
                  "text": "初次渲染",
                  "bold": true
                },
                {
                  "text": "；然后随着 "
                },
                {
                  "text": "props",
                  "code": true
                },
                {
                  "text": " 的改变，便会重新调用该组件函数，触发"
                },
                {
                  "text": "重渲染",
                  "bold": true
                },
                {
                  "text": "。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "你也许会纳闷，动画里面为啥要并排画三个一样的组件呢？因为我想通过这种方式直观地阐述函数式组件的一个重要思想："
                }
              ]
            },
            {
              "type": "block-quote",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "每一次渲染都是完全独立的。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "后面我们将沿用这样的风格，并一步步地介绍 Hook 在函数式组件中扮演怎样的角色。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "useState 使用浅析"
                }
              ],
              "id": "wCvwV7kl2"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "首先我们来简单地了解一下 "
                },
                {
                  "text": "useState",
                  "code": true
                },
                {
                  "text": " 钩子的使用，官方文档介绍的使用方法如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "js",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const [state, setState] = useState(initialValue);"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "其中 "
                },
                {
                  "text": "state",
                  "code": true
                },
                {
                  "text": " 就是一个状态变量，"
                },
                {
                  "text": "setState",
                  "code": true
                },
                {
                  "text": " 是一个用于修改状态的 Setter 函数，而 "
                },
                {
                  "text": "initialValue",
                  "code": true
                },
                {
                  "text": " 则是状态的初始值。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "光看代码可能有点抽象，请看下面的动画："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://imgkr.cn-bj.ufileos.com/e09f2b4d-e20d-4bad-ba62-80d860f80e9f.gif"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "与之前的纯函数式组件相比，我们引入了 "
                },
                {
                  "text": "useState",
                  "code": true
                },
                {
                  "text": " 这个钩子，瞬间就打破了之前 "
                },
                {
                  "text": "UI = render(data)",
                  "code": true
                },
                {
                  "text": " 的安静画面——函数组件居然可以"
                },
                {
                  "text": "从组件之外把状态和修改状态的函数“钩”过来",
                  "bold": true
                },
                {
                  "text": "！并且仔细看上面的动画，"
                },
                {
                  "text": "通过调用 Setter 函数，居然还可以直接触发组件的重渲染",
                  "bold": true
                },
                {
                  "text": "！"
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "你也许注意到了所有的“钩子”都指向了一个绿色的问号，我们会在下面详细地分析那是什么，现在就暂时把它看作是组件之外可以访问的一个“神秘领域”。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "结合上面的动画，我们可以得出一个重要的推论："
                },
                {
                  "text": "每次渲染具有独立的状态值",
                  "bold": true
                },
                {
                  "text": "（毕竟每次渲染都是完全独立的嘛）。也就是说，每个函数中的 "
                },
                {
                  "text": "state",
                  "code": true
                },
                {
                  "text": " 变量只是一个简单的"
                },
                {
                  "text": "常量",
                  "bold": true
                },
                {
                  "text": "，每次渲染时从钩子中获取到的常量，并没有附着数据绑定之类的神奇魔法。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这也就是老生常谈的 "
                },
                {
                  "text": "Capture Value",
                  "bold": true
                },
                {
                  "text": " 特性。可以看下面这段经典的计数器代码（来自 Dan 的"
                },
                {
                  "text": "这篇精彩的文章",
                  "link": true,
                  "url": "https://overreacted.io/a-complete-guide-to-useeffect/"
                },
                {
                  "text": "）："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "js",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function Counter() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  const [count, setCount] = useState(0);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  function handleAlertClick() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    setTimeout(() => {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      alert('You clicked on: ' + count);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    }, 3000);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    <div>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <p>You clicked {count} times</p>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <button onClick={() => setCount(count + 1)}>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        Click me"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      </button>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <button onClick={handleAlertClick}>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        Show alert"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      </button>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    </div>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  );"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "实现了上面这个计数器后（也可以直接通过这个 "
                },
                {
                  "text": "Sandbox",
                  "link": true,
                  "url": "https://codesandbox.io/s/w2wxl3yo0l"
                },
                {
                  "text": " 进行体验），按如下步骤操作：1）点击 Click me 按钮，把数字增加到 3；2）点击 Show alert 按钮；3）在 "
                },
                {
                  "text": "setTimeout",
                  "code": true
                },
                {
                  "text": " 触发之前点击 Click me，把数字增加到 5。"
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://imgkr.cn-bj.ufileos.com/ea1a3cb2-6bf5-4b5d-b7a7-1426521c1e5f.gif"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "结果是 Alert 显示 3！"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果你觉得这个结果很正常，恭喜你已经理解了 Capture Value 的思想！如果你觉得匪夷所思嘛……来简单解释一下："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "每次渲染相互独立，因此每次渲染时组件中的状态、事件处理函数等等都是独立的，或者说"
                    },
                    {
                      "text": "只属于",
                      "bold": true
                    },
                    {
                      "text": "所在的那一次渲染"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "我们在 "
                    },
                    {
                      "text": "count",
                      "code": true
                    },
                    {
                      "text": " 为 3 的时候触发了 "
                    },
                    {
                      "text": "handleAlertClick",
                      "code": true
                    },
                    {
                      "text": " 函数，这个函数"
                    },
                    {
                      "text": "所记住的",
                      "bold": true
                    },
                    {
                      "text": " "
                    },
                    {
                      "text": "count",
                      "code": true
                    },
                    {
                      "text": " 也为 3"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "三秒种后，刚才函数的 "
                    },
                    {
                      "text": "setTimeout",
                      "code": true
                    },
                    {
                      "text": " 结束，输出"
                    },
                    {
                      "text": "当时记住的",
                      "bold": true
                    },
                    {
                      "text": "结果：3"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这道理就像，你翻开十年前的日记本，虽然是现在翻开的，但记录的仍然是十年前的时光。或者说，日记本 Capture 了那一段美好的回忆。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "useEffect 使用浅析"
                }
              ],
              "id": "rri9lwi8o"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "你可能已经听说 "
                },
                {
                  "text": "useEffect",
                  "code": true
                },
                {
                  "text": " 类似类组件中的生命周期方法。但是在开始学习 "
                },
                {
                  "text": "useEffect",
                  "code": true
                },
                {
                  "text": " 之前，建议你暂时忘记生命周期模型，毕竟函数组件和类组件是不同的世界。官方文档介绍 "
                },
                {
                  "text": "useEffect",
                  "code": true
                },
                {
                  "text": " 的使用方法如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "useEffect(effectFn, deps)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "effectFn",
                  "code": true
                },
                {
                  "text": " 是一个执行某些可能具有"
                },
                {
                  "text": "副作用",
                  "bold": true
                },
                {
                  "text": "的 Effect 函数（例如数据获取、设置/销毁定时器等），它可以返回一个"
                },
                {
                  "text": "清理函数",
                  "bold": true
                },
                {
                  "text": "（Cleanup），例如大家所熟悉的 "
                },
                {
                  "text": "setInterval",
                  "code": true
                },
                {
                  "text": " 和 "
                },
                {
                  "text": "clearInterval",
                  "code": true
                },
                {
                  "text": " ："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "javascript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "useEffect(() => {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  const intervalId = setInterval(doSomething(), 1000);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return () => clearInterval(intervalId);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "});"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，我们在 Effect 函数体内通过 "
                },
                {
                  "text": "setInterval",
                  "code": true
                },
                {
                  "text": " 启动了一个定时器，随后又返回了一个 Cleanup 函数，用于销毁刚刚创建的定时器。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "OK，听上去还是很抽象，再来看看下面的动画吧："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://imgkr.cn-bj.ufileos.com/ad9b947f-77fe-43a0-bdee-a27d11246204.gif"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "动画中有以下需要注意的点："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "每个 Effect 必然在渲染之后执行，因此不会阻塞渲染，提高了性能"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "在运行每个 Effect 之前，运行前一次渲染的 Effect Cleanup 函数（如果有的话）"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "当组件销毁时，运行最后一次 Effect 的 Cleanup 函数"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "将 Effect 推迟到渲染完成之后执行是出于性能的考虑，如果你想在渲染之前执行某些逻辑（不惜牺牲渲染性能），那么可使用 "
                    },
                    {
                      "text": "useLayoutEffect",
                      "code": true,
                      "link": true,
                      "url": "https://reactjs.org/docs/hooks-reference.html#uselayouteffect"
                    },
                    {
                      "text": " 钩子，使用方法与 "
                    },
                    {
                      "text": "useEffect",
                      "code": true
                    },
                    {
                      "text": " 完全一致，只是执行的时机不同。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "再来看看 "
                },
                {
                  "text": "useEffect",
                  "code": true
                },
                {
                  "text": " 的第二个参数："
                },
                {
                  "text": "deps",
                  "code": true
                },
                {
                  "text": " （依赖数组）。从上面的演示动画中可以看出，React 会在"
                },
                {
                  "text": "每次渲染后都运行 Effect",
                  "bold": true
                },
                {
                  "text": "。而依赖数组就是用来控制是否应该触发 Effect，从而能够减少不必要的计算，从而优化了性能。具体而言，只要依赖数组中的每一项与上一次渲染相比都没有改变，那么就跳过本次 Effect 的执行。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "仔细一想，我们发现 "
                },
                {
                  "text": "useEffect",
                  "code": true
                },
                {
                  "text": " 钩子与之前类组件的生命周期相比，有两个显著的特点："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "将初次渲染（"
                    },
                    {
                      "text": "componentDidMount",
                      "code": true
                    },
                    {
                      "text": "）、重渲染（"
                    },
                    {
                      "text": "componentDidUpdate",
                      "code": true
                    },
                    {
                      "text": "）和销毁（"
                    },
                    {
                      "text": "componentDidUnmount",
                      "code": true
                    },
                    {
                      "text": "）三个阶段的逻辑用一个统一的 API 去解决"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "把相关的逻辑都放到一个 Effect 里面（例如 "
                    },
                    {
                      "text": "setInterval",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "clearInterval",
                      "code": true
                    },
                    {
                      "text": "），更突出逻辑的内聚性"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在最极端的情况下，我们可以指定 "
                },
                {
                  "text": "deps",
                  "code": true
                },
                {
                  "text": " 为空数组 "
                },
                {
                  "text": "[]",
                  "code": true
                },
                {
                  "text": " ，这样可以确保 Effect "
                },
                {
                  "text": "只会在组件初次渲染后执行",
                  "bold": true
                },
                {
                  "text": "。实际效果动画如下："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://imgkr.cn-bj.ufileos.com/bd507a8c-bf75-4e06-be79-7c027cce6955.gif"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，后面的所有重渲染都不会触发 Effect 的执行；在组件销毁时，运行 Effect Cleanup 函数。"
                }
              ]
            },
            {
              "type": "note",
              "level": "warning",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "如果你熟悉 React 的重渲染机制，那么应该可以猜到 "
                    },
                    {
                      "text": "deps",
                      "code": true
                    },
                    {
                      "text": " 数组在判断元素是否发生改变时同样也使用了 "
                    },
                    {
                      "text": "Object.is",
                      "code": true
                    },
                    {
                      "text": " 进行比较。因此一个隐患便是，当 "
                    },
                    {
                      "text": "deps",
                      "code": true
                    },
                    {
                      "text": " 中某一元素为非原始类型时（例如函数、对象等），"
                    },
                    {
                      "text": "每次渲染都会发生改变",
                      "bold": true
                    },
                    {
                      "text": "，从而失去了 "
                    },
                    {
                      "text": "deps",
                      "code": true
                    },
                    {
                      "text": " 本身的意义（条件式地触发 Effect）。我们会在接下来讲解如何规避这个困境。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/GlobalStats.js",
          "display": true,
          "commit": "5d8232d260cfb7e1885575ce1513d3f07d662a30",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "实战环节"
                    }
                  ],
                  "id": "Mgskwd6dE"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "OK，到了实战环节，我们先实现获取全球数据概况（每 5 秒重新获取一次）。创建 "
                    },
                    {
                      "text": "src/components/GlobalStats.js",
                      "code": true
                    },
                    {
                      "text": " 组件，用于展示全球数据概况，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/GlobalStats.js",
              "commit": "5d8232d260cfb7e1885575ce1513d3f07d662a30",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，"
                    },
                    {
                      "text": "GlobalStats",
                      "code": true
                    },
                    {
                      "text": " 就是一个简单的函数式组件，没有任何钩子。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.js",
          "display": true,
          "commit": "5d8232d260cfb7e1885575ce1513d3f07d662a30",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后修改 "
                    },
                    {
                      "text": "src/App.js",
                      "code": true
                    },
                    {
                      "text": " ，引入刚刚创建的 "
                    },
                    {
                      "text": "GlobalStats",
                      "code": true
                    },
                    {
                      "text": " 组件，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.js",
              "commit": "5d8232d260cfb7e1885575ce1513d3f07d662a30",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们在 "
                    },
                    {
                      "text": "App",
                      "code": true
                    },
                    {
                      "text": " 组件中，首先通过 "
                    },
                    {
                      "text": "useState",
                      "code": true
                    },
                    {
                      "text": " 钩子引入了 "
                    },
                    {
                      "text": "globalStats",
                      "code": true
                    },
                    {
                      "text": " 状态变量，以及修改该状态的函数。然后通过 "
                    },
                    {
                      "text": "useEffect",
                      "code": true
                    },
                    {
                      "text": " 钩子获取 API 数据，其中有以下需要注意的点："
                    }
                  ]
                },
                {
                  "type": "numbered-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们通过定义了一个 "
                        },
                        {
                          "text": "fetchGlobalStats",
                          "code": true
                        },
                        {
                          "text": " 异步函数并进行调用从而获取数据，而不是直接把这个 async 函数作为 "
                        },
                        {
                          "text": "useEffect",
                          "code": true
                        },
                        {
                          "text": " 的第一个参数；"
                        }
                      ],
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 1
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "创建了一个 Interval，用于每 5 秒钟重新获取一次数据；"
                        }
                      ],
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 2
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "返回一个函数，用于销毁之前创建的 Interval。"
                        }
                      ],
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 3
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "此外，第二个参数（依赖数组）为空数组，因此整个 Effect 函数只会运行一次。"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "warning",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "有时候，你也许会不经意间把 Effect 写成一个 async 函数："
                        }
                      ]
                    },
                    {
                      "type": "code-block",
                      "lang": "js",
                      "children": [
                        {
                          "type": "code-line",
                          "children": [
                            {
                              "text": "useEffect(async () => {"
                            }
                          ]
                        },
                        {
                          "type": "code-line",
                          "children": [
                            {
                              "text": "  const response = await fetch('...');"
                            }
                          ]
                        },
                        {
                          "type": "code-line",
                          "children": [
                            {
                              "text": "  // ..."
                            }
                          ]
                        },
                        {
                          "type": "code-line",
                          "children": [
                            {
                              "text": "}, []);"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "这样可以吗？"
                        },
                        {
                          "text": "强烈建议你不要这样做",
                          "bold": true
                        },
                        {
                          "text": "。"
                        },
                        {
                          "text": "useEffect",
                          "code": true
                        },
                        {
                          "text": " 约定 Effect 函数要么没有返回值，要么返回一个 Cleanup 函数。而这里 async 函数会隐式地返回一个 Promise，直接违反了这一约定，会造成不可预测的结果。"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.css",
          "display": true,
          "commit": "5d8232d260cfb7e1885575ce1513d3f07d662a30",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后附上应用的全局 CSS 文件，代码如下（直接复制粘贴即可）："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.css",
              "commit": "5d8232d260cfb7e1885575ce1513d3f07d662a30",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "通过 "
                },
                {
                  "text": "npm start",
                  "code": true
                },
                {
                  "text": " 开启项目："
                }
              ]
            },
            {
              "type": "image",
              "url": "https://imgkr.cn-bj.ufileos.com/c0e757fb-4838-4653-9ad6-9b9ddb05ee2f.png",
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "此外，你可以检查一下控制台的 Network 选项卡，应该能看到我们的应用每五秒就会发起一次请求查询最新的数据。恭喜你，成功地用 Hooks 进行了一次数据获取！"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "aca177468ecb4220a336d0d8f91e36f9bdd70b97",
      "id": "n6JOc9G9a-",
      "articleId": "870a7b7da39c3a83aba08cbbe5840859",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "aca177468ecb4220a336d0d8f91e36f9bdd70b97",
          "id": "SjEppER7xa",
          "fixed": true,
          "children": [
            {
              "text": "useState + useEffect：渐入佳境"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在上一步骤中，我们在 "
                },
                {
                  "text": "App",
                  "code": true
                },
                {
                  "text": " 组件中定义了一个 State 和 Effect，但是实际应用不可能这么简单，一般都需要多个 State 和 Effect，这时候又该怎么去理解和使用呢？"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "深入 useState 的本质"
                }
              ],
              "id": "q83Q6UL0j"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在上一节的动画中，我们看到每一次渲染组件时，我们都能通过一个神奇的钩子把状态”钩“过来，不过这些钩子从何而来我们打了一个问号。现在，是时候解开谜团了。"
                }
              ]
            },
            {
              "type": "note",
              "level": "warning",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "以下动画演示并不完全对应 React Hooks 的源码实现，但是它能很好地帮助你理解其工作原理。当然，也能帮助你去啃真正的源码。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们先来看看当组件初次渲染（挂载）时，情况到底是什么样的："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://imgkr.cn-bj.ufileos.com/af2ed210-08f7-4741-b17c-c2d4b67db3ff.gif"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "注意以下要点："
                }
              ]
            },
            {
              "type": "numbered-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "在初次渲染时，我们通过 "
                    },
                    {
                      "text": "useState",
                      "code": true
                    },
                    {
                      "text": " 定义了多个状态；"
                    }
                  ],
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 1
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "每调用一次 "
                    },
                    {
                      "text": "useState",
                      "code": true
                    },
                    {
                      "text": " ，都会在组件之外生成一条 Hook 记录，同时包括状态值（用 "
                    },
                    {
                      "text": "useState",
                      "code": true
                    },
                    {
                      "text": " 给定的初始值初始化）和修改状态的 Setter 函数；"
                    }
                  ],
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 2
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "多次调用 "
                    },
                    {
                      "text": "useState",
                      "code": true
                    },
                    {
                      "text": " 生成的 Hook 记录形成了一条"
                    },
                    {
                      "text": "链表",
                      "bold": true
                    },
                    {
                      "text": "；"
                    }
                  ],
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 3
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "触发 "
                    },
                    {
                      "text": "onClick",
                      "code": true
                    },
                    {
                      "text": " 回调函数，调用 "
                    },
                    {
                      "text": "setS2",
                      "code": true
                    },
                    {
                      "text": " 函数修改 "
                    },
                    {
                      "text": "s2",
                      "code": true
                    },
                    {
                      "text": " 的状态，不仅修改了 Hook 记录中的状态值，还即将"
                    },
                    {
                      "text": "触发重渲染",
                      "bold": true
                    },
                    {
                      "text": "。"
                    }
                  ],
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 4
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "OK，重渲染的时候到了，动画如下："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://imgkr.cn-bj.ufileos.com/799216d1-b91e-4cb6-9410-b8776ab82ff5.gif"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，在初次渲染结束之后、重渲染之前，Hook 记录链表依然存在。当我们逐个调用 "
                },
                {
                  "text": "useState",
                  "code": true
                },
                {
                  "text": " 的时候，"
                },
                {
                  "text": "useState",
                  "code": true
                },
                {
                  "text": " 便返回了 Hook 链表中存储的状态，以及修改状态的 Setter。"
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "当你充分理解上面两个动画之后，其实就能理解为什么这个 Hook 叫 "
                    },
                    {
                      "text": "useState",
                      "code": true
                    },
                    {
                      "text": " 而不是 "
                    },
                    {
                      "text": "createState",
                      "code": true
                    },
                    {
                      "text": " 了——之所以叫 "
                    },
                    {
                      "text": "use",
                      "code": true
                    },
                    {
                      "text": " ，是因为没有的时候才创建（初次渲染的时候），有的时候就直接读取（重渲染的时候）。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "通过以上的分析，我们不难发现 "
                },
                {
                  "text": "useState",
                  "code": true
                },
                {
                  "text": " 在设计方面的精巧（摘自张立理："
                },
                {
                  "link": true,
                  "url": "https://zhuanlan.zhihu.com/p/48264713",
                  "text": "对 React Hooks 的一些思考"
                },
                {
                  "text": "）："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "状态和修改状态的 Setter 函数两两配对，并且后者一定影响前者，前者只被后者影响，作为一个整体它们完全不受外界的影响"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "鼓励细粒度和扁平化的状态定义和控制，对于代码行为的可预测性和可测试性大有帮助"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "除了 "
                    },
                    {
                      "text": "useState",
                      "code": true
                    },
                    {
                      "text": " （和其他钩子），函数组件依然是实现渲染逻辑的“纯”组件，对状态的管理被 Hooks 所封装了起来"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "深入 useEffect 的本质"
                }
              ],
              "id": "UxHbsc-qd"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在对 "
                },
                {
                  "text": "useState",
                  "code": true
                },
                {
                  "text": " 进行一波深挖之后，我们再来揭开 "
                },
                {
                  "text": "useEffect",
                  "code": true
                },
                {
                  "text": " 神秘的面纱。实际上，你可能已经猜到了——同样是通过一个链表记录所有的 Hook，请看下面的演示："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://imgkr.cn-bj.ufileos.com/ebb090f8-7471-46ad-9556-b773d1910d03.gif"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "注意其中一些细节："
                }
              ]
            },
            {
              "type": "numbered-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "useState",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "useEffect",
                      "code": true
                    },
                    {
                      "text": " 在每次调用时都被添加到 Hook 链表中；"
                    }
                  ],
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 1
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "useEffect",
                      "code": true
                    },
                    {
                      "text": " 还会额外地在一个队列中添加一个等待执行的 Effect 函数；"
                    }
                  ],
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 2
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "在渲染完成后，依次调用 Effect 队列中的每一个 Effect 函数。"
                    }
                  ],
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 3
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "至此，上一节的动画中那两个“问号”的身世也就揭晓了——只不过是"
                },
                {
                  "text": "链表",
                  "bold": true
                },
                {
                  "text": "罢了！回过头来，我们想起来 React 官方文档 Rules of Hooks 中强调过一点："
                }
              ]
            },
            {
              "type": "block-quote",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "Only call hooks at the top level. 只在最顶层使用 Hook。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "具体地说，不要在循环、嵌套、条件语句中使用 Hook——因为这些动态的语句很有可能会导致每次执行组件函数时调用 Hook 的顺序不能完全一致，导致 Hook 链表记录的数据失效。具体的场景就不画动画啦，自行脑补吧~"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "不要撒谎：关于 deps 的那些事"
                }
              ],
              "id": "ALxZmndYx"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "useEffect",
                  "code": true
                },
                {
                  "text": " （包括其他类似的 "
                },
                {
                  "text": "useCallback",
                  "code": true
                },
                {
                  "text": " 和 "
                },
                {
                  "text": "useMemo",
                  "code": true
                },
                {
                  "text": " 等）都有个依赖数组（"
                },
                {
                  "text": "deps",
                  "code": true
                },
                {
                  "text": "）参数，这个参数比较有趣的一点是：指定依赖的决定权完全在你手里。你当然可以选择“撒谎”，不管什么情况都给一个空的 "
                },
                {
                  "text": "deps",
                  "code": true
                },
                {
                  "text": " 数组，仿佛在说“这个 Effect 函数什么依赖都没有，相信我”。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "然而，这种有点偷懒的做法显然会引来各种 Bug。一般来说，所使用到的 "
                },
                {
                  "text": "prop",
                  "code": true
                },
                {
                  "text": " 或者 "
                },
                {
                  "text": "state",
                  "code": true
                },
                {
                  "text": " 都应该被添加到 "
                },
                {
                  "text": "deps",
                  "code": true
                },
                {
                  "text": " 数组里面去。并且，React 官方还推出了一个专门的 "
                },
                {
                  "text": "ESLint 插件",
                  "link": true,
                  "url": "https://www.npmjs.com/package/eslint-plugin-react-hooks"
                },
                {
                  "text": "，可以帮你自动修复 "
                },
                {
                  "text": "deps",
                  "code": true
                },
                {
                  "text": " 数组（"
                },
                {
                  "text": "说实话，这个插件的自动修复有时候还是挺闹心的……",
                  "italic": true
                },
                {
                  "text": "）。"
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": ".gitignore",
          "display": false,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": ".gitignore",
              "commit": "aca177468ecb4220a336d0d8f91e36f9bdd70b97",
              "hiddenLines": [
                [
                  0,
                  19
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "package.json",
          "display": false,
          "commit": "aca177468ecb4220a336d0d8f91e36f9bdd70b97",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package.json",
              "commit": "aca177468ecb4220a336d0d8f91e36f9bdd70b97",
              "hiddenLines": [
                [
                  0,
                  6
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/CountriesChart.js",
          "display": true,
          "commit": "aca177468ecb4220a336d0d8f91e36f9bdd70b97",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "实战环节"
                    }
                  ],
                  "id": "0f94BKs5P"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "从这一步开始，我们将使用 "
                    },
                    {
                      "text": "Recharts",
                      "link": true,
                      "url": "http://recharts.org"
                    },
                    {
                      "text": " 作为可视化应用的图表库，它提供了出色的 D3 和 React 的绑定层。通过如下命令添加 "
                    },
                    {
                      "text": "recharts",
                      "code": true
                    },
                    {
                      "text": " 依赖："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "npm install recharts"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "创建 "
                    },
                    {
                      "text": "src/components/CountriesChart.js",
                      "code": true
                    },
                    {
                      "text": " ，用于展示多个国家的相关数据直方图，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/CountriesChart.js",
              "commit": "aca177468ecb4220a336d0d8f91e36f9bdd70b97",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/SelectDataKey.js",
          "display": true,
          "commit": "aca177468ecb4220a336d0d8f91e36f9bdd70b97",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "创建 "
                    },
                    {
                      "text": "src/components/SelectDataKey.js",
                      "code": true
                    },
                    {
                      "text": " ，用于选择需要展示的关键指标，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/SelectDataKey.js",
              "commit": "aca177468ecb4220a336d0d8f91e36f9bdd70b97",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "SelectDataKey",
                      "code": true
                    },
                    {
                      "text": " 用于让用户选择以下关键指标："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "cases",
                          "code": true
                        },
                        {
                          "text": " ：累积确诊病例"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "todayCases",
                          "code": true
                        },
                        {
                          "text": " ：今日确诊病例"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "deaths",
                          "code": true
                        },
                        {
                          "text": " ：累积死亡病例"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "recovered",
                          "code": true
                        },
                        {
                          "text": " ：治愈人数"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "active",
                          "code": true
                        },
                        {
                          "text": " ：现存确诊人数"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.js",
          "display": true,
          "commit": "aca177468ecb4220a336d0d8f91e36f9bdd70b97",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后我们在根组件 "
                    },
                    {
                      "text": "src/App.js",
                      "code": true
                    },
                    {
                      "text": " 中引入上面创建的两个组件，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.js",
              "commit": "aca177468ecb4220a336d0d8f91e36f9bdd70b97",
              "hiddenLines": [
                [
                  0,
                  2
                ],
                [
                  15,
                  24
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到："
                    }
                  ]
                },
                {
                  "type": "numbered-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们创建了两个新的状态 "
                        },
                        {
                          "text": "countries",
                          "code": true
                        },
                        {
                          "text": " （所有国家的数据）和 "
                        },
                        {
                          "text": "key",
                          "code": true
                        },
                        {
                          "text": " （数据排序的指标，就是上面的五个）；"
                        }
                      ],
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 1
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们又通过一个 "
                        },
                        {
                          "text": "useEffect",
                          "code": true
                        },
                        {
                          "text": " 钩子进行数据获取，和之前获取全球数据类似，只不过注意我们这边第二个参数（依赖数组）是 "
                        },
                        {
                          "text": "[key]",
                          "code": true
                        },
                        {
                          "text": " ，也就是只有当 "
                        },
                        {
                          "text": "key",
                          "code": true
                        },
                        {
                          "text": " 状态改变的时候，才会调用 "
                        },
                        {
                          "text": "useEffect",
                          "code": true
                        },
                        {
                          "text": " 里面的函数。"
                        }
                      ],
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 2
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后使用之前创建的两个子组件，传入相应的数据和回调函数。"
                        }
                      ],
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 3
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "yarn.lock",
          "display": false,
          "commit": "aca177468ecb4220a336d0d8f91e36f9bdd70b97",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "yarn.lock",
              "commit": "aca177468ecb4220a336d0d8f91e36f9bdd70b97",
              "hiddenLines": [
                [
                  0,
                  1575
                ],
                [
                  1584,
                  2958
                ],
                [
                  2970,
                  3484
                ],
                [
                  3496,
                  3799
                ],
                [
                  3811,
                  4131
                ],
                [
                  4201,
                  4249
                ],
                [
                  4261,
                  4458
                ],
                [
                  4472,
                  7314
                ],
                [
                  7326,
                  7344
                ],
                [
                  7363,
                  7432
                ],
                [
                  7444,
                  9379
                ],
                [
                  9388,
                  9497
                ],
                [
                  9506,
                  9612
                ],
                [
                  9634,
                  9687
                ],
                [
                  9714,
                  9795
                ],
                [
                  9826,
                  9834
                ],
                [
                  9857,
                  10073
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "把项目跑起来，可以看到直方图显示了前十个国家的数据，并且可以修改排序的指标（比如可以从默认的累积确诊 "
                },
                {
                  "text": "cases",
                  "code": true
                },
                {
                  "text": " 切换成死亡人数 "
                },
                {
                  "text": "deaths",
                  "code": true
                },
                {
                  "text": " ）："
                }
              ]
            },
            {
              "type": "image",
              "url": "https://imgkr.cn-bj.ufileos.com/da72e057-92c4-4215-ab8f-59355ca160df.gif",
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "看上去挺不错的！"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "到这里，本系列第一篇也就讲完啦，希望你真正理解了 "
                },
                {
                  "text": "useState",
                  "code": true
                },
                {
                  "text": " 和 "
                },
                {
                  "text": "useEffect",
                  "code": true
                },
                {
                  "text": " ——最最最常用的两个 Hook。在下一篇教程中，我们将继续讲解自定义 Hook 和 "
                },
                {
                  "text": "useCallback",
                  "code": true
                },
                {
                  "text": " ，敬请期待。"
                }
              ]
            },
            {
              "type": "heading-two",
              "children": [
                {
                  "text": "参考资料"
                }
              ],
              "id": "mj2Lz1HlB"
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "React 官方文档",
                      "link": true,
                      "url": "https://reactjs.org/"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Robin Wieruch："
                    },
                    {
                      "link": true,
                      "url": "https://www.robinwieruch.de/react-hooks-fetch-data",
                      "text": "How to fetch data with React Hooks?"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Dan Abramov："
                    },
                    {
                      "link": true,
                      "url": "https://overreacted.io/a-complete-guide-to-useeffect/",
                      "text": "A Complete Guide to useEffect"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Dan Abramov："
                    },
                    {
                      "link": true,
                      "url": "https://overreacted.io/how-are-function-components-different-from-classes/",
                      "text": "How Are Function Components Different from Classes?"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Rudi Yardley："
                    },
                    {
                      "link": true,
                      "url": "https://medium.com/@ryardley/react-hooks-not-magic-just-arrays-cd4f1857236e",
                      "text": "React hooks: not magic, just arrays"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Eytan Manor："
                    },
                    {
                      "link": true,
                      "url": "https://medium.com/the-guild/under-the-hood-of-reacts-hooks-system-eb59638c9dba",
                      "text": "Under the hood of React’s hooks system"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "衍良："
                    },
                    {
                      "link": true,
                      "url": "https://zhuanlan.zhihu.com/p/92211533",
                      "text": "React Hooks 完全上手指南"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "张立理："
                    },
                    {
                      "link": true,
                      "url": "https://zhuanlan.zhihu.com/p/48264713",
                      "text": "对 React Hooks 的一些思考"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "a5434a86386ae4e43edde5e3689867e1f4c6faa5",
      "id": "Ag50v9VMg_",
      "articleId": "xocgOEMnq",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "a5434a86386ae4e43edde5e3689867e1f4c6faa5",
          "id": "aZReEOukqU",
          "fixed": true,
          "children": [
            {
              "text": "自定义 Hook：量身定制"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在"
                },
                {
                  "text": "上一篇教程",
                  "link": true,
                  "url": "https://tuture.co/2020/04/08/870a7b7/"
                },
                {
                  "text": "中，我们通过动画的方式不断深入 "
                },
                {
                  "text": "useState",
                  "code": true
                },
                {
                  "text": " 和 "
                },
                {
                  "text": "useEffect",
                  "code": true
                },
                {
                  "text": "，基本上理清了 React Hooks 背后的实现机制——"
                },
                {
                  "text": "链表",
                  "bold": true
                },
                {
                  "text": "，同时也实现了 COVID-19 数据可视化应用的全球数据总览和多个国家数据的直方图。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果你想直接从这一篇教程开始阅读和实践，可下载本教程的源码："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "git clone -b second-part https://github.com/tuture-dev/covid-19-with-hooks.git"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "# 或者克隆 Gitee 的仓库"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "git clone -b second-part https://gitee.com/tuture/covid-19-with-hooks.git"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "自定义 Hook 是 React Hooks 中最有趣的功能，或者说特色。简单来说，它用一种高度灵活的方式，能够让你在不同的函数组件之间共享某些特定的逻辑。我们先来通过一个非常简单的例子来看一下。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "一个简单的自定义 Hook"
                }
              ],
              "id": "HzAw-JYvt"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "先来看一个 Hook，名为 "
                },
                {
                  "text": "useBodyScrollPosition",
                  "code": true
                },
                {
                  "text": " ，用于获取当前浏览器的垂直滚动位置："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "javascript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function useBodyScrollPosition() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  const [scrollPosition, setScrollPosition] = useState(null);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  useEffect(() => {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    const handleScroll = () => setScrollPosition(window.scrollY);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    document.addEventListener('scroll', handleScroll);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return () =>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      document.removeEventListener('scroll', handleScroll);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }, []);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return scrollPosition;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "通过观察，我们可以发现自定义 Hook 具有以下特点："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "表面上：一个命名格式为 "
                    },
                    {
                      "text": "useXXX",
                      "code": true
                    },
                    {
                      "text": " 的函数，但不是 React 函数式组件"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "本质上：内部通过使用 React 自带的一些 Hook （例如 "
                    },
                    {
                      "text": "useState",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "useEffect",
                      "code": true
                    },
                    {
                      "text": " ）来实现某些通用的逻辑"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果你发散一下思维，可以想到有很多地方可以去做自定义 Hook：DOM 副作用修改/监听、动画、请求、表单操作、数据存储等等。"
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里推荐两个强大的 React Hooks 库："
                    },
                    {
                      "text": "React Use",
                      "link": true,
                      "url": "https://github.com/streamich/react-use"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "Umi Hooks",
                      "link": true,
                      "url": "https://github.com/umijs/hooks"
                    },
                    {
                      "text": "。它们都实现了很多生产级别的自定义 Hook，非常值得学习。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我想这便是 React Hooks 最大的魅力——通过几个内置的 Hook，你可以按照某些约定进行任意组合，“制造出”任何你真正需要的 Hook，或者调用他人写好的 Hook，从而轻松应对各种复杂的业务场景。就好像大千世界无奇不有，却不过是由一百多种元素组合而成。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "管窥自定义 Hook 背后的原理"
                }
              ],
              "id": "nKlN8jJQh"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "又到了动画时间。我们来看看在组件初次渲染时的情形："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://imgkr.cn-bj.ufileos.com/a1063c8d-85c7-4b4e-911b-3423cd5ccd85.gif"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们在 "
                },
                {
                  "text": "App",
                  "code": true
                },
                {
                  "text": " 组件中调用了 "
                },
                {
                  "text": "useCustomHook",
                  "code": true
                },
                {
                  "text": " 钩子。可以看到，"
                },
                {
                  "text": "即便我们切换到了自定义 Hook 中，Hook 链表的生成依旧没有改变",
                  "bold": true
                },
                {
                  "text": "。再来看看重渲染的情况："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://imgkr.cn-bj.ufileos.com/5e93794b-94ce-4e5c-a0f0-b4f6b2a5254e.gif"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "同样地，即便代码的执行进入到自定义 Hook 中，我们依然可以从 Hook 链表中读取到相应的数据，这个”配对“的过程总能成功。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们再次回味一下 Rules of Hook。它规定只有在两个地方能够使用 React Hook："
                }
              ]
            },
            {
              "type": "numbered-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "React 函数组件"
                    }
                  ],
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 1
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "自定义 Hook"
                    }
                  ],
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 2
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "第一点我们早就清楚了，第二点通过刚才的两个动画相信你也明白了："
                },
                {
                  "text": "自定义 Hook 本质上只是把调用内置 Hook 的过程封装成一个个可以复用的函数，并不影响 Hook 链表的生成和读取",
                  "bold": true
                },
                {
                  "text": "。"
                }
              ]
            }
          ]
        },
        {
          "file": "src/hooks/useCoronaAPI.js",
          "display": true,
          "commit": "a5434a86386ae4e43edde5e3689867e1f4c6faa5",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "实战环节"
                    }
                  ],
                  "id": "C0lR9Ae84"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "让我们继续 COVID-19 数据应用的开发。接下来，我们打算实现历史数据的展示，包括确诊病例、死亡病例和治愈人数。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们首先来实现一个自定义 Hook，名为 "
                    },
                    {
                      "text": "useCoronaAPI",
                      "code": true
                    },
                    {
                      "text": " ，用于共享从 NovelCOVID 19 API 获取数据的逻辑。创建 "
                    },
                    {
                      "text": "src/hooks/useCoronaAPI.js",
                      "code": true
                    },
                    {
                      "text": "，填写代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/hooks/useCoronaAPI.js",
              "commit": "a5434a86386ae4e43edde5e3689867e1f4c6faa5",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，定义的 "
                    },
                    {
                      "text": "useCoronaAPI",
                      "code": true
                    },
                    {
                      "text": " 包含两个参数，第一个是 "
                    },
                    {
                      "text": "path",
                      "code": true
                    },
                    {
                      "text": " ，也就是 API 路径；第二是配置参数，包括以下参数："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "initialData",
                          "code": true
                        },
                        {
                          "text": " ：初始为空的默认数据"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "converter",
                          "code": true
                        },
                        {
                          "text": " ：对原始数据的转换函数（默认是一个恒等函数）"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "refetchInterval",
                          "code": true
                        },
                        {
                          "text": " ：重新获取数据的间隔（以毫秒为单位）"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "此外，我们还要注意 "
                    },
                    {
                      "text": "useEffect",
                      "code": true
                    },
                    {
                      "text": " 所传入的 "
                    },
                    {
                      "text": "deps",
                      "code": true
                    },
                    {
                      "text": " 数组，包括了三个元素（都是在 Effect 函数中用到的）："
                    },
                    {
                      "text": "converter",
                      "code": true
                    },
                    {
                      "text": " 、"
                    },
                    {
                      "text": "path",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "refetchInterval",
                      "code": true
                    },
                    {
                      "text": " ，均来自 "
                    },
                    {
                      "text": "useCoronaAPI",
                      "code": true
                    },
                    {
                      "text": " 传入的参数。"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "在"
                        },
                        {
                          "text": "上一篇文章",
                          "link": true,
                          "url": "https://tuture.co/2020/04/08/870a7b7/"
                        },
                        {
                          "text": "中，我们简单地提到过，不要对 "
                        },
                        {
                          "text": "useEffect",
                          "code": true
                        },
                        {
                          "text": " 的依赖说谎，那么这里就是一个很好的案例：我们将 Effect 函数"
                        },
                        {
                          "text": "所有用到的外部数据",
                          "bold": true
                        },
                        {
                          "text": "（包括函数）全部加入到了依赖数组中。当然，由于 "
                        },
                        {
                          "text": "BASE_URL",
                          "code": true
                        },
                        {
                          "text": " 属于模块级别的常量，因此不需要作为依赖。"
                        },
                        {
                          "text": "不过这里留了个坑，嘿嘿……",
                          "italic": true
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.js",
          "display": true,
          "commit": "a5434a86386ae4e43edde5e3689867e1f4c6faa5",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后在根组件 "
                    },
                    {
                      "text": "src/App.js",
                      "code": true
                    },
                    {
                      "text": " 中使用刚刚创建的 "
                    },
                    {
                      "text": "useCoronaAPI",
                      "code": true
                    },
                    {
                      "text": " 钩子，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.js",
              "commit": "a5434a86386ae4e43edde5e3689867e1f4c6faa5",
              "hiddenLines": [
                [
                  3,
                  6
                ],
                [
                  49,
                  54
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "整个 "
                    },
                    {
                      "text": "App",
                      "code": true
                    },
                    {
                      "text": " 组件变得清晰了很多，不是吗？"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "但是当我们满怀期待地把应用跑起来，却发现整个应用陷入“无限请求”的怪圈中。打开 Chrome 开发者工具的 Network 选项卡，你会发现网络请求数量始终在飙升……"
                }
              ]
            },
            {
              "type": "image",
              "url": "https://imgkr.cn-bj.ufileos.com/0bac85a3-69cd-4273-8fa9-70fa8ee52ec7.gif",
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "吓得我们赶紧把网页关了。冷静下来之后，不禁沉思：这到底是为什么呢？"
                }
              ]
            },
            {
              "type": "note",
              "level": "danger",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "NovelCOVID 19 API",
                      "link": true,
                      "url": "https://corona.lmao.ninja/docs/#/"
                    },
                    {
                      "text": " 属于公益性质的数据资源，我们应该尽快把页面关掉，避免给对方的服务器造成太大的请求压力。"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "4cc12d8997aa0afde9916c73d96f4352b5b72a32",
      "id": "IX-CGX5ED7",
      "articleId": "xocgOEMnq",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "4cc12d8997aa0afde9916c73d96f4352b5b72a32",
          "id": "K5OU_9Me3k",
          "fixed": true,
          "children": [
            {
              "text": "useCallback：定海神针"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果你一字一句把"
                },
                {
                  "text": "上一篇文章",
                  "link": true,
                  "url": "https://tuture.co/2020/04/08/870a7b7/"
                },
                {
                  "text": "看下来，其实可能已经发现了问题的线索："
                }
              ]
            },
            {
              "type": "block-quote",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "依赖数组在判断元素是否发生改变时使用了 "
                    },
                    {
                      "text": "Object.is",
                      "code": true
                    },
                    {
                      "text": " 进行比较，因此当 "
                    },
                    {
                      "text": "deps",
                      "code": true
                    },
                    {
                      "text": " 中某一元素为非原始类型时（例如函数、对象等），"
                    },
                    {
                      "text": "每次渲染都会发生改变",
                      "bold": true
                    },
                    {
                      "text": "，从而每次都会触发 Effect，失去了 "
                    },
                    {
                      "text": "deps",
                      "code": true
                    },
                    {
                      "text": " 本身的意义。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "OK，如果你没有印象也没关系，我们先来聊一聊初学 React Hooks 经常会遇到的一个问题：Effect 无限循环。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "关于 Effect 无限循环"
                }
              ],
              "id": "kzsb2bQTn"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "来看一下这段”永不停止“的计数器："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "js",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function EndlessCounter() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  const [count, setCount] = useState(0);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  useEffect(() => {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    setTimeout(() => setCount(count + 1), 1000);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  });"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    <div className=\"App\">"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <h1>{count}</h1>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    </div>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  );"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果你去运行这段代码，会发现数字永远在增长。我们来通过一段动画来演示一下这个”无限循环“到底是怎么回事："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://imgkr.cn-bj.ufileos.com/7d74f227-0c63-405e-9ce9-0cfb4b2ce546.gif"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们的组件陷入了："
                },
                {
                  "text": "渲染 => 触发 Effect => 修改状态 => 触发重渲染",
                  "bold": true
                },
                {
                  "text": "的无限循环。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "想必你已经发现 "
                },
                {
                  "text": "useEffect",
                  "code": true
                },
                {
                  "text": " 陷入无限循环的”罪魁祸首“了——因为没有提供正确的 "
                },
                {
                  "text": "deps",
                  "code": true
                },
                {
                  "text": " ！从而导致每次渲染后都会去执行 Effect 函数。事实上，在之前的 "
                },
                {
                  "text": "useCoronaAPI",
                  "code": true
                },
                {
                  "text": " 中，也是因为传入的 "
                },
                {
                  "text": "deps",
                  "code": true
                },
                {
                  "text": " 存在问题，导致每次渲染后都去执行 Effect 函数去获取数据，陷入了无限循环。那么，到底是哪个依赖出现了问题？"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "没错，就是那个 "
                },
                {
                  "text": "converter",
                  "code": true
                },
                {
                  "text": " 函数！我们知道，在 JavaScript 中，原始类型和非原始类型在判断值是否相同的时候有巨大的差别："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "js",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "// 原始类型"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "true === true // true"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "1 === 1 // true"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "'a' === 'a' // true"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "// 非原始类型"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "{} === {} // false"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "[] === [] // false"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "() => {} === () => {} // false"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "同样，每次传入的 "
                },
                {
                  "text": "converter",
                  "code": true
                },
                {
                  "text": " 函数虽然形式上一样，但仍然是不同的函数（引用不相等），从而导致每次都会执行 Effect 函数。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "关于记忆化缓存（Memoization）"
                }
              ],
              "id": "CfP8VmD_P"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "Memoization，一般称为记忆化缓存（或者“记忆”），听上去是很高深的计算机专业术语，但是它背后的思想很简单：假如我们有一个"
                },
                {
                  "text": "计算量很大的纯函数",
                  "bold": true
                },
                {
                  "text": "（给定相同的输入，一定会得到相同的输出），那么我们在第一次遇到特定输入的时候，把它的输出结果“记”（缓存）下来，那么下次碰到同样的输出，只需要从缓存里面拿出来直接返回就可以了，省去了计算的过程！"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "实际上，除了节省不必要的计算、从而提高程序性能之外，Memoization 还有一个用途："
                },
                {
                  "text": "用了保证返回值的引用相等",
                  "bold": true
                },
                {
                  "text": "。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们先通过一段简单的求平方根的函数，熟悉一下 Memoization 的原理。首先是一个没有缓存的版本："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "js",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function sqrt(arg) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return { result: Math.sqrt(arg) };"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "你也许注意到了我们特地返回了一个对象来记录结果，我们后面会和 Memoized 的版本进行对比分析。然后是加了缓存的版本："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "js",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function memoizedSqrt(arg) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  // 如果 cache 不存在，则初始化一个空对象"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  if (!memoizedSqrt.cache) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    memoizedSqrt.cache = {};"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  // 如果 cache 没有命中，则先计算，再存入 cache，然后返回结果"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  if (!memoizedSqrt.cache[arg]) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return memoizedSqrt.cache[arg] = { result: Math.sqrt(arg) };"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  // 直接返回 cache 内的结果，无需计算"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return memoizedSqrt.cache[arg];"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "然后我们尝试调用这两个函数，就会发现一些明显的区别："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "js",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "sqrt(9)                      // { result: 3 }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "sqrt(9) === sqrt(9)          // false"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "Object.is(sqrt(9), sqrt(9))  // false"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "memoizedSqrt(9)                              // { result: 3 }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "memoizedSqrt(9) === memoizedSqrt(9)          // true"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "Object.is(memoizedSqrt(9), memoizedSqrt(9))  // true"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "普通的 "
                },
                {
                  "text": "sqrt",
                  "code": true
                },
                {
                  "text": " 每次返回的结果的引用都不相同（或者说是一个"
                },
                {
                  "text": "全新",
                  "bold": true
                },
                {
                  "text": "的对象），而 "
                },
                {
                  "text": "memoizedSqrt",
                  "code": true
                },
                {
                  "text": " 则能返回完全相同的对象。因此在 React 中，通过 Memoization 可以确保多次渲染中的 Prop 或者状态的引用相等，从而能够避免不必要的重渲染或者副作用执行。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "让我们来总结一下记忆化缓存（Memoization）的两个使用场景："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "通过缓存计算结果，节省费时的计算"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "保证相同输入下返回值的引用相等"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "使用方法和原理解析"
                }
              ],
              "id": "duon-RSm6"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "为了解决函数在多次渲染中的"
                },
                {
                  "text": "引用相等",
                  "bold": true
                },
                {
                  "text": "（Referential Equality）问题，React 引入了一个重要的 Hook—— "
                },
                {
                  "text": "useCallback",
                  "code": true
                },
                {
                  "text": "。官方文档介绍的使用方法如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "js",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const memoizedCallback = useCallback(callback, deps);"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "第一个参数 "
                },
                {
                  "text": "callback",
                  "code": true
                },
                {
                  "text": " 就是需要记忆的函数，第二个参数就是大家熟悉的 "
                },
                {
                  "text": "deps",
                  "code": true
                },
                {
                  "text": " 参数，同样也是一个依赖数组（有时候也被称为输入 "
                },
                {
                  "text": "inputs",
                  "code": true
                },
                {
                  "text": "）。在 Memoization 的上下文中，这个 "
                },
                {
                  "text": "deps",
                  "code": true
                },
                {
                  "text": " 的作用相当于缓存中的键（Key），如果键没有改变，那么就直接返回缓存中的函数，并且确保是引用相同的函数。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在大多数情况下，我们都是传入空数组 "
                },
                {
                  "text": "[]",
                  "code": true
                },
                {
                  "text": " 作为 "
                },
                {
                  "text": "deps",
                  "code": true
                },
                {
                  "text": " 参数，这样 "
                },
                {
                  "text": "useCallback",
                  "code": true
                },
                {
                  "text": " 返回的就"
                },
                {
                  "text": "始终是同一个函数，永远不会更新",
                  "bold": true
                },
                {
                  "text": "。"
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "你也许在刚开始学习 "
                    },
                    {
                      "text": "useEffect",
                      "code": true
                    },
                    {
                      "text": " 的时候就发现：我们并不需要把 "
                    },
                    {
                      "text": "useState",
                      "code": true
                    },
                    {
                      "text": " 返回的第二个 Setter 函数作为 Effect 的依赖。实际上，React 内部已经对 Setter 函数做了 Memoization 处理，因此每次渲染拿到的 Setter 函数都是完全一样的，"
                    },
                    {
                      "text": "deps",
                      "code": true
                    },
                    {
                      "text": " 加不加都是没有影响的。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "按照惯例，我们还是通过一段动画来了解一下 "
                },
                {
                  "text": "useCallback",
                  "code": true
                },
                {
                  "text": " 的原理（"
                },
                {
                  "text": "deps",
                  "code": true
                },
                {
                  "text": " 为空数组的情况），首先是初次渲染："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://imgkr.cn-bj.ufileos.com/71dce125-e7f7-4389-a0a4-f3edb0156f46.gif"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "和之前一样，调用 "
                },
                {
                  "text": "useCallback",
                  "code": true
                },
                {
                  "text": " 也是追加到 Hook 链表上，不过这里着重强调了这个函数 "
                },
                {
                  "text": "f1",
                  "code": true
                },
                {
                  "text": " 所指向的内存位置（随便画了一个），从而明确告诉我们："
                },
                {
                  "text": "这个 ",
                  "bold": true
                },
                {
                  "text": "f1",
                  "code": true,
                  "bold": true
                },
                {
                  "text": " 始终是指向同一个函数",
                  "bold": true
                },
                {
                  "text": "。然后返回的 "
                },
                {
                  "text": "onClick",
                  "code": true
                },
                {
                  "text": " 则是指向 Hook 中存储的 "
                },
                {
                  "text": "f1",
                  "code": true
                },
                {
                  "text": "。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "再来看看重渲染的情况："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://imgkr.cn-bj.ufileos.com/d2dfa7fb-64c4-47cc-b85e-b43ee9150dd7.gif"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "重渲染的时候，再次调用 "
                },
                {
                  "text": "useCallback",
                  "code": true
                },
                {
                  "text": " 同样返回给我们 "
                },
                {
                  "text": "f1",
                  "code": true
                },
                {
                  "text": " 函数，并且这个函数还是指向同一块内存，从而使得 "
                },
                {
                  "text": "onClick",
                  "code": true
                },
                {
                  "text": " 函数和上次渲染时真正做到了"
                },
                {
                  "text": "引用相等",
                  "bold": true
                },
                {
                  "text": "。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "useCallback 和 useMemo 的关系"
                }
              ],
              "id": "kiq73LCW_"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们知道 "
                },
                {
                  "text": "useCallback",
                  "code": true
                },
                {
                  "text": " 有个好基友叫 "
                },
                {
                  "text": "useMemo",
                  "code": true
                },
                {
                  "text": "。还记得我们之前总结了 Memoization 的两大场景吗？"
                },
                {
                  "text": "useCallback",
                  "code": true
                },
                {
                  "text": " 主要是为了解决函数的”"
                },
                {
                  "text": "引用相等",
                  "bold": true
                },
                {
                  "text": "“问题，而 "
                },
                {
                  "text": "useMemo",
                  "code": true
                },
                {
                  "text": " 则是一个”"
                },
                {
                  "text": "全能型选手",
                  "bold": true
                },
                {
                  "text": "“，能够同时胜任引用相等和节约计算的任务。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "实际上，"
                },
                {
                  "text": "useMemo",
                  "code": true
                },
                {
                  "text": " 的功能是 "
                },
                {
                  "text": "useCallback",
                  "code": true
                },
                {
                  "text": " 的"
                },
                {
                  "text": "超集",
                  "bold": true
                },
                {
                  "text": "。与 "
                },
                {
                  "text": "useCallback",
                  "code": true
                },
                {
                  "text": " 只能缓存函数相比，"
                },
                {
                  "text": "useMemo",
                  "code": true
                },
                {
                  "text": " 可以缓存任何类型的值（当然也包括函数）。"
                },
                {
                  "text": "useMemo",
                  "code": true
                },
                {
                  "text": " 的使用方法如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "js",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "其中第一个参数是一个函数，这个函数返回值的返回值（也就是上面 "
                },
                {
                  "text": "computeExpensiveValue",
                  "code": true
                },
                {
                  "text": " 的结果）将返回给 "
                },
                {
                  "text": "memoizedValue",
                  "code": true
                },
                {
                  "text": " 。因此以下两个钩子的使用是完全等价的："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "js",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "useCallback(fn, deps);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "useMemo(() => fn, deps);"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "鉴于在前端开发中遇到的计算密集型任务是相当少的，而且浏览器引擎的性能也足够优秀，因此这一系列文章不会深入去讲解 "
                },
                {
                  "text": "useMemo",
                  "code": true
                },
                {
                  "text": " 的使用。更何况，已经掌握 "
                },
                {
                  "text": "useCallback",
                  "code": true
                },
                {
                  "text": " 的你，应该也已经知道怎么去使用 "
                },
                {
                  "text": "useMemo",
                  "code": true
                },
                {
                  "text": " 了吧？"
                }
              ]
            }
          ]
        },
        {
          "file": "src/hooks/useCoronaAPI.js",
          "display": true,
          "commit": "4cc12d8997aa0afde9916c73d96f4352b5b72a32",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "实战环节"
                    }
                  ],
                  "id": "okqbWlZCV"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "熟悉了 "
                    },
                    {
                      "text": "useCallback",
                      "code": true
                    },
                    {
                      "text": " 之后，我们开始修复 "
                    },
                    {
                      "text": "useCoronaAPI",
                      "code": true
                    },
                    {
                      "text": " 钩子的问题。修改 "
                    },
                    {
                      "text": "src/hooks/useCoronaAPI",
                      "code": true
                    },
                    {
                      "text": " ，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/hooks/useCoronaAPI.js",
              "commit": "4cc12d8997aa0afde9916c73d96f4352b5b72a32",
              "hiddenLines": [
                [
                  3,
                  4
                ],
                [
                  6,
                  7
                ],
                [
                  14,
                  15
                ],
                [
                  21,
                  24
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们把 "
                    },
                    {
                      "text": "converter",
                      "code": true
                    },
                    {
                      "text": " 函数用 "
                    },
                    {
                      "text": "useCallback",
                      "code": true
                    },
                    {
                      "text": " 包裹了起来，把记忆化处理后的函数命名为 "
                    },
                    {
                      "text": "convertData",
                      "code": true
                    },
                    {
                      "text": "，并且传入的 "
                    },
                    {
                      "text": "deps",
                      "code": true
                    },
                    {
                      "text": " 参数为空数组 "
                    },
                    {
                      "text": "[]",
                      "code": true
                    },
                    {
                      "text": " ，确保每次渲染都相同。然后把 "
                    },
                    {
                      "text": "useEffect",
                      "code": true
                    },
                    {
                      "text": " 中所有的 "
                    },
                    {
                      "text": "converter",
                      "code": true
                    },
                    {
                      "text": " 函数相应修改成 "
                    },
                    {
                      "text": "convertData",
                      "code": true
                    },
                    {
                      "text": "。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "最后再次开启项目，一切又回归了正常，这次自定义 Hook 重构圆满完成！在下一篇教程中，我们将开始进一步推进 COVID-19 数据可视化项目的推进，通过曲线图的方式实现历史数据的展示（包括确诊、死亡和治愈）。数据状态变得越来越复杂，我们又该如何应对呢？敬请期待。"
                }
              ]
            },
            {
              "type": "block-quote",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "剧透提醒：用 useReducer + useContext 实现一个简单的 Redux！"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-two",
              "children": [
                {
                  "text": "参考资料"
                }
              ],
              "id": "BtgpIAg2Z"
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "React 官方文档",
                      "link": true,
                      "url": "https://reactjs.org/docs/hooks-reference.html"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "DT-FE："
                    },
                    {
                      "text": "怎么用 React Hooks 造轮子",
                      "link": true,
                      "url": "https://github.com/dt-fe/weekly/blob/v2/080.%E7%B2%BE%E8%AF%BB%E3%80%8A%E6%80%8E%E4%B9%88%E7%94%A8%20React%20Hooks%20%E9%80%A0%E8%BD%AE%E5%AD%90%E3%80%8B.md"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "WellPaidGeed："
                    },
                    {
                      "link": true,
                      "url": "https://dev.to/wellpaidgeek/how-to-write-custom-hooks-in-react-1ana",
                      "text": "How to write custom hooks in React"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Netlify Blog："
                    },
                    {
                      "link": true,
                      "url": "https://www.netlify.com/blog/2019/03/11/deep-dive-how-do-react-hooks-really-work/",
                      "text": "Deep dive: How do React hooks really work?"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Andrew Myint："
                    },
                    {
                      "link": true,
                      "url": "https://medium.com/@andrewmyint/infinite-loop-inside-useeffect-react-hooks-6748de62871",
                      "text": "How to Fix the Infinite Loop Inside “useEffect” (React Hooks)"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Kent C. Dodds："
                    },
                    {
                      "link": true,
                      "url": "https://kentcdodds.com/blog/usememo-and-usecallback",
                      "text": "When to useMemo and useCallback"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Sandro Dolidze："
                    },
                    {
                      "link": true,
                      "url": "https://medium.com/@sdolidze/react-hooks-memoization-99a9a91c8853",
                      "text": "React Hooks: Memoization"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Chidume Nnamdi："
                    },
                    {
                      "link": true,
                      "url": "https://blog.bitsrc.io/understanding-memoization-in-javascript-to-improve-performance-2763ab107092",
                      "text": "Understanding Memoization in JavaScript to Improve Performance"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "3050aa7a17490bdc945729b870475e717b37f247",
      "id": "R-p50_R7AK",
      "articleId": "689bb434",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "3050aa7a17490bdc945729b870475e717b37f247",
          "id": "Z3Tg-lc1O7",
          "fixed": true,
          "children": [
            {
              "text": "useState：柳暗花明"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "欢迎继续阅读《用动画和实战打开 React Hooks 系列》："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "《用动画和实战打开 React Hooks（一）：useState 和 useEffect》",
                      "link": true,
                      "url": "https://tuture.co/2020/04/08/870a7b7/"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "《用动画和实战打开 React Hooks（二）：自定义 Hook 和 useCallback》",
                      "link": true,
                      "url": "https://tuture.co/2020/04/14/xocgOEM/"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果你想要直接从这一篇开始学习，那么请克隆我们为你提供的源代码："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "git clone -b third-part https://github.com/tuture-dev/covid-19-with-hooks.git"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "# 如果你访问 GitHub 不流畅，我们还提供了 Gitee 地址"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "git clone -b third-part https://gitee.com/tuture/covid-19-with-hooks.git"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在这第三篇文章中，我们将首先来重温一下 "
                },
                {
                  "text": "useState",
                  "code": true
                },
                {
                  "text": " 。在之前的两篇教程中，我们可以说和 "
                },
                {
                  "text": "useState",
                  "code": true
                },
                {
                  "text": " 并肩作战了很久，是我们非常“熟悉”的老朋友了。但是回过头来，我们真的足够了解它吗？"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "一个未解决的问题"
                }
              ],
              "id": "8KN1gWAP-"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "你很有可能在使用 "
                },
                {
                  "text": "useState",
                  "code": true
                },
                {
                  "text": " 的时候遇到过一个问题：通过 Setter 修改状态的时候，怎么读取上一个状态值，并在此基础上修改呢？如果你看文档足够细致，应该会注意到 "
                },
                {
                  "text": "useState",
                  "code": true
                },
                {
                  "text": " 有一个"
                },
                {
                  "text": "函数式更新",
                  "bold": true
                },
                {
                  "text": "（Functional Update）的用法，以下面这段计数器（代码来自 "
                },
                {
                  "text": "React 官网",
                  "link": true,
                  "url": "https://reactjs.org/docs/hooks-reference.html#functional-updates"
                },
                {
                  "text": "）为例："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "js",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function Counter({initialCount}) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  const [count, setCount] = useState(initialCount);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    <>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      Count: {count}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <button onClick={() => setCount(initialCount)}>Reset</button>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <button onClick={() => setCount(prevCount => prevCount - 1)}>-</button>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <button onClick={() => setCount(prevCount => prevCount + 1)}>+</button>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    </>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  );"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，我们传入 "
                },
                {
                  "text": "setCount",
                  "code": true
                },
                {
                  "text": " 的是一个函数，"
                },
                {
                  "text": "它的参数是之前的状态，返回的是新的状态",
                  "bold": true
                },
                {
                  "text": "。熟悉 Redux 的朋友马上就指出来了：这其实就是一个 "
                },
                {
                  "text": "Reducer 函数",
                  "link": true,
                  "url": "https://redux.js.org/basics/reducers"
                },
                {
                  "text": "。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "Reducer 函数的前生今世"
                }
              ],
              "id": "cry7CuTqZ"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "Redux 文档里面已经详细地阐述了 "
                },
                {
                  "text": "Reducer 函数",
                  "link": true,
                  "url": "https://redux.js.org/basics/reducers"
                },
                {
                  "text": "，但是我们这里将先回归最基础的概念，暂时忘掉框架相关的知识。在学习 JavaScript 基础时，你应该接触过数组的 "
                },
                {
                  "text": "reduce",
                  "code": true
                },
                {
                  "text": " 方法，它可以用一种相当炫酷的方式实现数组求和："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "js",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const nums = [1, 2, 3]"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const value = nums.reduce((acc, next) => acc + next, 0)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "其中 "
                },
                {
                  "text": "reduce",
                  "code": true
                },
                {
                  "text": " 的第一个参数 "
                },
                {
                  "text": "(acc, next) => acc + next",
                  "code": true
                },
                {
                  "text": " 就是一个 Reducer 函数。从表面上来看，这个函数接受一个状态的累积值 "
                },
                {
                  "text": "acc",
                  "code": true
                },
                {
                  "text": " 和新的值 "
                },
                {
                  "text": "next",
                  "code": true
                },
                {
                  "text": "，然后返回更新过后的累积值 "
                },
                {
                  "text": "acc + next",
                  "code": true
                },
                {
                  "text": "。从更深层次来说，Reducer 函数有"
                },
                {
                  "text": "两个必要规则",
                  "bold": true
                },
                {
                  "text": "："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "只返回一个值"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "不修改输入值，而是返回新的值"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "第一点很好判断，其中第二点则是很多新手踩过的坑，对比以下两个函数："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "js",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "// 不是 Reducer 函数！"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function buy(cart, thing) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  cart.push(thing);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return cart;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "// 正宗的 Reducer 函数"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function buy(cart, thing) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return cart.concat(thing);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "上面的函数调用了数组的 "
                },
                {
                  "text": "push",
                  "code": true
                },
                {
                  "text": " 方法，会"
                },
                {
                  "text": "就地修改",
                  "bold": true
                },
                {
                  "text": "输入的 "
                },
                {
                  "text": "cart",
                  "code": true
                },
                {
                  "text": " 参数（是否 "
                },
                {
                  "text": "return",
                  "code": true
                },
                {
                  "text": " 都无所谓了），违反了 Reducer 第二条规则，而下面的函数通过数组的 "
                },
                {
                  "text": "concat",
                  "code": true
                },
                {
                  "text": " 方法返回了一个"
                },
                {
                  "text": "全新的数组",
                  "bold": true
                },
                {
                  "text": "，避免了直接修改 "
                },
                {
                  "text": "cart",
                  "code": true
                },
                {
                  "text": " 。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们回过头来看之前 "
                },
                {
                  "text": "useState",
                  "code": true
                },
                {
                  "text": " 的函数式更新写法："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "js",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "setCount(prevCount => prevCount + 1);"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "是不是一个很标准的 Reducer？"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "最熟悉的陌生人"
                }
              ],
              "id": "8Iq8Dhy6J"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们在前两篇教程中大量地使用了 "
                },
                {
                  "text": "useState",
                  "code": true
                },
                {
                  "text": "，你可能就此认为 "
                },
                {
                  "text": "useState",
                  "code": true
                },
                {
                  "text": " 应该是最底层的"
                },
                {
                  "text": "元素",
                  "bold": true
                },
                {
                  "text": "了。但实际上在 React 的源码中，"
                },
                {
                  "text": "useState",
                  "code": true
                },
                {
                  "text": " 的实现使用了 "
                },
                {
                  "text": "useReducer",
                  "code": true
                },
                {
                  "text": "（本文的主角，下面会讲到）。在 "
                },
                {
                  "text": "React 源码",
                  "link": true,
                  "url": "https://github.com/facebook/react/blob/v16.13.1/packages/react-reconciler/src/ReactFiberHooks.js#L623"
                },
                {
                  "text": "中有这么一个关键的函数 "
                },
                {
                  "text": "basicStateReducer",
                  "code": true
                },
                {
                  "text": "（去掉了源码中的 "
                },
                {
                  "text": "Flow",
                  "link": true,
                  "url": "https://flow.org/"
                },
                {
                  "text": " 类型定义）："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "js",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function basicStateReducer(state, action) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return typeof action === 'function' ? action(state) : action;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "于是，当我们通过 "
                },
                {
                  "text": "setCount(prevCount => prevCount + 1)",
                  "code": true
                },
                {
                  "text": " 改变状态时，传入的 "
                },
                {
                  "text": "action",
                  "code": true
                },
                {
                  "text": " 就是一个 Reducer 函数，然后调用该函数并传入当前的 "
                },
                {
                  "text": "state",
                  "code": true
                },
                {
                  "text": "，得到更新后的状态。而我们之前通过传入具体的值修改状态时（例如 "
                },
                {
                  "text": "setCount(5)",
                  "code": true
                },
                {
                  "text": "），由于不是函数，所以直接取传入的值作为更新后的状态。"
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里选取的是 "
                    },
                    {
                      "text": "React v16.13.1",
                      "link": true,
                      "url": "https://github.com/facebook/react/tree/v16.13.1"
                    },
                    {
                      "text": " 的源码，但是整体的实现应该已经趋于稳定，原理上不会相差太多。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "听上去还是有点迷迷糊糊？又到了我们的动画环节。首先，我们传入的 "
                },
                {
                  "text": "action",
                  "code": true
                },
                {
                  "text": " 是一个具体的值："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://imgkr.cn-bj.ufileos.com/e3456450-0532-4f60-ad18-012f18bd00a7.gif"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "当传入 Setter 的是一个 Reducer 函数的时候："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://imgkr.cn-bj.ufileos.com/611f9506-4fce-40d3-beca-706bcaab7bbf.gif"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "是不是一下子就豁然开朗了？"
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/HistoryChart.js",
          "display": true,
          "commit": "3050aa7a17490bdc945729b870475e717b37f247",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "实战环节"
                    }
                  ],
                  "id": "NjL_8QL8A"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这一步要写的代码比较多（可自行复制粘贴哈），我们要实现如下图所示的历史趋势图展示效果："
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://imgkr.cn-bj.ufileos.com/4a1444db-7c7a-42ef-8b90-fc3aae02ec54.png"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "注意到我们展示了三个历史趋势（确诊病例 Cases、死亡病例 Deaths 和治愈病例 Recovered），并且每张历史趋势图可以调节过去的天数（从 0 到 30 天）。"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "实现历史趋势图"
                    }
                  ],
                  "id": "NjL_8QL8A"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先，让我们来实现历史曲线图 "
                    },
                    {
                      "text": "HistoryChart",
                      "code": true
                    },
                    {
                      "text": " 组件。创建 "
                    },
                    {
                      "text": "src/components/HistoryChart.js",
                      "code": true
                    },
                    {
                      "text": " 组件，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/HistoryChart.js",
              "commit": "3050aa7a17490bdc945729b870475e717b37f247",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里我们使用了 "
                    },
                    {
                      "text": "Recharts",
                      "link": true,
                      "url": "http://recharts.org/"
                    },
                    {
                      "text": " 的 "
                    },
                    {
                      "text": "AreaChart",
                      "link": true,
                      "url": "http://recharts.org/en-US/api/AreaChart"
                    },
                    {
                      "text": " 组件来绘制历史趋势图，然后在图表下方添加了一个范围拖动条，能够让用户选择查看过去 1 到 30 天的历史趋势。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "HistoryChart",
                      "code": true
                    },
                    {
                      "text": " 组件包含以下 Props："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "title",
                          "code": true
                        },
                        {
                          "text": " 是图表标题"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "data",
                          "code": true
                        },
                        {
                          "text": " 就是绘制图表需要的历史数据"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "lastDays",
                          "code": true
                        },
                        {
                          "text": " 是显示过去 N 天的数据，可以通过 "
                        },
                        {
                          "text": "data.slice(-lastDays)",
                          "code": true
                        },
                        {
                          "text": " 进行选择"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "onLastDaysChange",
                          "code": true
                        },
                        {
                          "text": " 是用户通过 "
                        },
                        {
                          "text": "input",
                          "code": true
                        },
                        {
                          "text": " 修改处理过去 N 天时的事件处理函数"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/utils.js",
          "display": true,
          "commit": "3050aa7a17490bdc945729b870475e717b37f247",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着，我们需要一个辅助函数来对历史数据进行一些转换处理。NovelCOVID 19 API 返回的历史数据是一个对象："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "js",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "{"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  \"3/28/20\": 81999,"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  \"3/29/20\": 82122"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "为了能够适应 Recharts 的数据格式，我们希望转换成数组格式："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "js",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "["
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    time: \"3/28/20\","
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    number: 81999"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  },"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    time: \"3/29/20\","
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    number: 82122"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "]"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这个可以通过 "
                    },
                    {
                      "text": "Object.entries",
                      "code": true
                    },
                    {
                      "text": " 很方便地进行转换。我们创建 "
                    },
                    {
                      "text": "src/utils.js",
                      "code": true
                    },
                    {
                      "text": " 文件，实现 "
                    },
                    {
                      "text": "transformHistory",
                      "code": true
                    },
                    {
                      "text": " 函数，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/utils.js",
              "commit": "3050aa7a17490bdc945729b870475e717b37f247",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/HistoryChartGroup.js",
          "display": true,
          "commit": "3050aa7a17490bdc945729b870475e717b37f247",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着我们来实现历史趋势图组 "
                    },
                    {
                      "text": "HistoryChartGroup",
                      "code": true
                    },
                    {
                      "text": "，包含三个图表：确诊病例（Cases）、死亡人数（Deaths）和治愈病例（Recovered）。创建 "
                    },
                    {
                      "text": "src/components/HistoryChartGroup.js",
                      "code": true
                    },
                    {
                      "text": "，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/HistoryChartGroup.js",
              "commit": "3050aa7a17490bdc945729b870475e717b37f247",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/CountriesChart.js",
          "display": true,
          "commit": "3050aa7a17490bdc945729b870475e717b37f247",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "调整 CountriesChart 组件"
                    }
                  ],
                  "id": "pYenfIi3Y"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们需要稍微调整一下 "
                    },
                    {
                      "text": "CountriesChart",
                      "code": true
                    },
                    {
                      "text": " 组件，使得用户在点击一个国家的数据后，能够展示对应的历史趋势图。打开 "
                    },
                    {
                      "text": "src/components/CountriesChart.js",
                      "code": true
                    },
                    {
                      "text": "，添加一个 "
                    },
                    {
                      "text": "onClick",
                      "code": true
                    },
                    {
                      "text": " Prop，并传入 "
                    },
                    {
                      "text": "BarChart",
                      "code": true
                    },
                    {
                      "text": " 中，如下面的代码所示："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/CountriesChart.js",
              "commit": "3050aa7a17490bdc945729b870475e717b37f247",
              "hiddenLines": [
                [
                  0,
                  9
                ],
                [
                  22,
                  27
                ],
                [
                  32,
                  32
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.js",
          "display": true,
          "commit": "3050aa7a17490bdc945729b870475e717b37f247",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "在根组件中集成"
                    }
                  ],
                  "id": "qKEUZ-VyK"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后，我们调整根组件，把之前实现的历史趋势图和修改后的 "
                    },
                    {
                      "text": "CountriesChart",
                      "code": true
                    },
                    {
                      "text": " 集成到应用中。打开 "
                    },
                    {
                      "text": "src/App.js",
                      "code": true
                    },
                    {
                      "text": "，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.js",
              "commit": "3050aa7a17490bdc945729b870475e717b37f247",
              "hiddenLines": [
                [
                  0,
                  6
                ],
                [
                  10,
                  19
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "note",
              "level": "success",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "写完之后开启项目，点击直方图中的任意一个国家，就会展示该国家的历史趋势图（累计确诊、死亡病例、治愈病例），我们还可以随意调节过去的天数。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "虽然现在我们的应用已经初步成型，但回过头来看代码，发现组件的状态和修改状态的逻辑散落在各个组件中，后面维护和实现新功能时无疑会遇到很大的困难，这时候就需要做专门的状态管理了。熟悉 React 开发的同学一定知道 "
                },
                {
                  "text": "Redux",
                  "link": true,
                  "url": "https://redux.js.org/"
                },
                {
                  "text": " 或者 "
                },
                {
                  "text": "MobX",
                  "link": true,
                  "url": "https://mobx.js.org/README.html"
                },
                {
                  "text": " 这样的库，不过借助 React Hooks，我们可以自己轻松地实现一个轻量级的状态管理解决方案。"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "1c61d8d36db6c1f04b4214288e24c7057eae2c6e",
      "id": "jdEFK1seRU",
      "articleId": "689bb434",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "1c61d8d36db6c1f04b4214288e24c7057eae2c6e",
          "id": "wwwzrDXGgl",
          "fixed": true,
          "children": [
            {
              "text": "useReducer + useContext：呼风唤雨"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在之前我们说过，这篇文章将通过 React Hooks 来实现一个轻量级的、类似 Redux 的状态管理模型。不过在此之前，我们先简单地过一遍 Redux 的基本思想（熟悉的同学可以直接跳过哈）。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "Redux 基本思想"
                }
              ],
              "id": "JNB6rSni9"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "之前，应用的状态（例如我们应用中当前国家、历史数据等等）散落在各个组件中，大概就像这样："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://imgkr.cn-bj.ufileos.com/a79e0ef9-5518-4a15-ba91-fb99695ca8e6.png"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，每个组件都有自己的 State（状态）和 State Setter（状态修改函数），这意味着跨组件的状态读取和修改是相当麻烦的。而 Redux 的核心思想之一就是将状态放到"
                },
                {
                  "text": "唯一的全局对象",
                  "bold": true
                },
                {
                  "text": "（一般称为 Store）中，而修改状态则是调用对应的 Reducer 函数去更新 Store 中的状态，大概就像这样："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://imgkr.cn-bj.ufileos.com/6f8147ee-aba5-499b-b7e9-0d3dca857ba8.gif"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "上面这个动画描述的是组件 A 改变 B 和 C 中状态的过程："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "三个组件挂载时，从 Store 中"
                    },
                    {
                      "text": "获取并订阅",
                      "bold": true
                    },
                    {
                      "text": "相应的状态数据并展示（注意是"
                    },
                    {
                      "text": "只读",
                      "bold": true
                    },
                    {
                      "text": "的，不能直接修改）"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "用户点击组件 A，触发事件监听函数"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "监听函数中派发（Dispatch）对应的动作（Action），传入 Reducer 函数"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Reducer 函数返回更新后的状态，并以此更新 Store"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "由于组件 B 和 C 订阅了 Store 的状态，所以重新获取更新后的状态并调整 UI"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这篇教程不会详细地讲解 Redux，想要深入学习的同学可以阅读我们的"
                    },
                    {
                      "text": "《Redux 包教包会》",
                      "link": true,
                      "url": "https://tuture.co/2019/11/28/1fe175a/"
                    },
                    {
                      "text": "系列教程。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "useReducer 使用浅析"
                }
              ],
              "id": "001QuK4n_"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "首先，我们还是来看下官方介绍的 "
                },
                {
                  "text": "useReducer",
                  "code": true
                },
                {
                  "text": " 使用方法："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "js",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const [state, dispatch] = useReducer(reducer, initialArg, init);"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "首先我们来看下 "
                },
                {
                  "text": "useReducer",
                  "code": true
                },
                {
                  "text": " 需要提供哪些参数："
                }
              ]
            },
            {
              "type": "numbered-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "第一个参数 "
                    },
                    {
                      "text": "reducer",
                      "code": true
                    },
                    {
                      "text": " 显然是必须的，它的形式跟 Redux 中的 Reducer 函数完全一致，即 "
                    },
                    {
                      "text": "(state, action) => newState",
                      "code": true
                    },
                    {
                      "text": "。"
                    }
                  ],
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 1
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "第二个参数 "
                    },
                    {
                      "text": "initialArg",
                      "code": true
                    },
                    {
                      "text": " 就是状态的初始值。"
                    }
                  ],
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 2
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "第三个参数 "
                    },
                    {
                      "text": "init",
                      "code": true
                    },
                    {
                      "text": " 是一个可选的用于"
                    },
                    {
                      "text": "懒初始化",
                      "bold": true
                    },
                    {
                      "text": "（Lazy Initialization）的函数，这个函数返回初始化后的状态。"
                    }
                  ],
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 3
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "返回的 "
                },
                {
                  "text": "state",
                  "code": true
                },
                {
                  "text": "（只读状态）和 "
                },
                {
                  "text": "dispatch",
                  "code": true
                },
                {
                  "text": "（派发函数）则比较容易理解了。我们来结合一个简单的计数器例子讲解一下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "js",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "// Reducer 函数"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function reducer(state, action) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  switch (action.type) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    case 'increment':"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      return { count: state.count + 1 };"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    default:"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      throw new Error();"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function Counter() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  const [state, dispatch] = useReducer(reducer, { count: 0 });"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    <>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      Count: {state.count}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <button onClick={() => dispatch({ type: 'increment' })}>+</button>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    </>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  );"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们首先关注一下 Reducer 函数，它的两个参数 "
                },
                {
                  "text": "state",
                  "code": true
                },
                {
                  "text": " 和 "
                },
                {
                  "text": "action",
                  "code": true
                },
                {
                  "text": " 分别是当前状态和 "
                },
                {
                  "text": "dispatch",
                  "code": true
                },
                {
                  "text": " 派发的动作。这里的动作就是普通的 JavaScript 对象，用来表示修改状态的操作，注意 "
                },
                {
                  "text": "type",
                  "code": true
                },
                {
                  "text": " 是必须要有的属性，代表"
                },
                {
                  "text": "动作的类型",
                  "bold": true
                },
                {
                  "text": "。然后我们根据 "
                },
                {
                  "text": "action",
                  "code": true
                },
                {
                  "text": " 的类型返回相应修改后的新状态。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "然后在 "
                },
                {
                  "text": "Counter",
                  "code": true
                },
                {
                  "text": " 组件中，我们通过 "
                },
                {
                  "text": "useReducer",
                  "code": true
                },
                {
                  "text": " 钩子获取到了状态和 "
                },
                {
                  "text": "dispatch",
                  "code": true
                },
                {
                  "text": " 函数，然后把这个状态渲染出来。在按钮 "
                },
                {
                  "text": "button",
                  "code": true
                },
                {
                  "text": " 的 "
                },
                {
                  "text": "onClick",
                  "code": true
                },
                {
                  "text": " 回调函数中，我们通过 "
                },
                {
                  "text": "dispatch",
                  "code": true
                },
                {
                  "text": " 一个类型为 "
                },
                {
                  "text": "increment",
                  "code": true
                },
                {
                  "text": " 的 Action 去更新状态。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "天哪，为什么一个简单的计数器都搞得这么复杂！简简单单一个 "
                },
                {
                  "text": "useState",
                  "code": true
                },
                {
                  "text": " 不就搞定了吗？"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "什么时候该用 useReducer"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "你也许发现，"
                },
                {
                  "text": "useReducer",
                  "code": true
                },
                {
                  "text": " 和 "
                },
                {
                  "text": "useState",
                  "code": true
                },
                {
                  "text": " 的使用目的几乎是一样的："
                },
                {
                  "text": "定义状态和修改状态的逻辑",
                  "bold": true
                },
                {
                  "text": "。"
                },
                {
                  "text": "useReducer",
                  "code": true
                },
                {
                  "text": " 使用起来较为繁琐，但如果你的状态管理出现了至少一个以下所列举的问题："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "需要维护的状态本身比较复杂，多个状态之间相互依赖"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "修改状态的过程比较复杂"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "那么我们就强烈建议你使用 "
                },
                {
                  "text": "useReducer",
                  "code": true
                },
                {
                  "text": " 了。我们来通过一个实际的案例讲解来感受一下 "
                },
                {
                  "text": "useReducer",
                  "code": true
                },
                {
                  "text": " 的威力（这次不是无聊的计数器啦）。假设我们要做一个支持"
                },
                {
                  "text": "撤销",
                  "italic": true
                },
                {
                  "text": "和"
                },
                {
                  "text": "重做",
                  "italic": true
                },
                {
                  "text": "的编辑器，它的 "
                },
                {
                  "text": "init",
                  "code": true
                },
                {
                  "text": " 函数和 Reducer 函数分别如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "js",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "// 用于懒初始化的函数"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function init(initialState) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    past: [],"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    present: initialState,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    future: [],"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  };"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "// Reducer 函数"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function reducer(state, action) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  const { past, future, present } = state;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  switch (action.type) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    case 'UNDO':"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      return {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        past: past.slice(0, past.length - 1),"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        present: past[past.length - 1],"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        future: [present, ...future],"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      };"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    case 'REDO':"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      return {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        past: [...past, present],"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        present: future[0],"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        future: future.slice(1),"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      };"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    default:"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      return state;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "试试看用 "
                },
                {
                  "text": "useState",
                  "code": true
                },
                {
                  "text": " 去写，会不会很复杂？"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "useContext 使用浅析"
                }
              ],
              "id": "goxFaSV4G"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "现在状态的获取和修改都已经通过 "
                },
                {
                  "text": "useReducer",
                  "code": true
                },
                {
                  "text": " 搞定了，那么只差一个问题：怎么让所有组件都能获取到 "
                },
                {
                  "text": "dispatch",
                  "code": true
                },
                {
                  "text": " 函数呢？"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在 Hooks 诞生之前，React 已经有了在组件树中共享数据的解决方案："
                },
                {
                  "text": "Context",
                  "link": true,
                  "url": "https://zh-hans.reactjs.org/docs/context.html"
                },
                {
                  "text": "。在类组件中，我们可以通过 "
                },
                {
                  "text": "Class.contextType",
                  "code": true
                },
                {
                  "text": " 属性获取到最近的 Context Provider，那么在函数式组件中，我们该怎么获取呢？答案就是 "
                },
                {
                  "text": "useContext",
                  "code": true
                },
                {
                  "text": " 钩子。使用起来非常简单："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "js",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "// 在某个文件中定义 MyContext"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const MyContext = React.createContext('hello');"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "// 在函数式组件中获取 Context"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function Component() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  const value = useContext(MyContext);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  // ..."
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "通过 "
                },
                {
                  "text": "useContext",
                  "code": true
                },
                {
                  "text": " ，我们就可以轻松地让所有组件都能获取到 "
                },
                {
                  "text": "dispatch",
                  "code": true
                },
                {
                  "text": " 函数了！"
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.js",
          "display": true,
          "commit": "1c61d8d36db6c1f04b4214288e24c7057eae2c6e",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "实战环节"
                    }
                  ],
                  "id": "kYnDnNo0i"
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "设计中心状态"
                    }
                  ],
                  "id": "bRCVFwh5I"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "好的，让我们开始用 useReducer + useContext 的组合来重构应用的状态管理。按照状态中心化的原则，我们把整个应用的状态提取到一个全局对象中。初步设计（TypeScript 类型定义）如下："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "type AppState {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  // 数据指标类别"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  key: \"cases\" | \"deaths\" | \"recovered\";"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  // 当前国家"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  country: string | null;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  // 过去天数"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  lastDays: {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    cases: number;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    deaths: number;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    recovered: number;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "在根组件中定义 Reducer 和 Dispatch Context"
                    }
                  ],
                  "id": "oZmUtavj9"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这一次我们按照"
                    },
                    {
                      "text": "自顶向下",
                      "bold": true
                    },
                    {
                      "text": "的顺序，先在根组件 "
                    },
                    {
                      "text": "App",
                      "code": true
                    },
                    {
                      "text": " 中配置好所有需要的 Reducer 以及 Dispatch 上下文。打开 "
                    },
                    {
                      "text": "src/App.js",
                      "code": true
                    },
                    {
                      "text": " ，修改代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.js",
              "commit": "1c61d8d36db6c1f04b4214288e24c7057eae2c6e",
              "hiddenLines": [
                [
                  3,
                  8
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们来一一分析上面的代码变化："
                    }
                  ]
                },
                {
                  "type": "numbered-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先定义了整个应用的初始状态 "
                        },
                        {
                          "text": "initialState",
                          "code": true
                        },
                        {
                          "text": "，这个是后面 "
                        },
                        {
                          "text": "useReducer",
                          "code": true
                        },
                        {
                          "text": " 钩子所需要的"
                        }
                      ],
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 1
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "然后我们定义了 Reducer 函数，主要响应三个 Action："
                        },
                        {
                          "text": "SET_KEY",
                          "code": true
                        },
                        {
                          "text": " 、"
                        },
                        {
                          "text": "SET_COUNTRY",
                          "code": true
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "text": "SET_LASTDAYS",
                          "code": true
                        },
                        {
                          "text": " ，分别用于修改数据指标、国家和过去天数这三个状态"
                        }
                      ],
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 2
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "定义了 "
                        },
                        {
                          "text": "AppDispatch",
                          "code": true
                        },
                        {
                          "text": " 这个 Context，用来向子组件传递 "
                        },
                        {
                          "text": "dispatch",
                          "code": true
                        },
                        {
                          "text": " "
                        }
                      ],
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 3
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "调用 "
                        },
                        {
                          "text": "useReducer",
                          "code": true
                        },
                        {
                          "text": " 钩子，获取到状态 "
                        },
                        {
                          "text": "state",
                          "code": true
                        },
                        {
                          "text": " 和分发函数 "
                        },
                        {
                          "text": "dispatch",
                          "code": true
                        },
                        {
                          "text": " "
                        }
                      ],
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 4
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后在渲染时用 "
                        },
                        {
                          "text": "AppDispatch.Provider",
                          "code": true
                        },
                        {
                          "text": " 将整个应用包裹起来，传入 "
                        },
                        {
                          "text": "dispatch",
                          "code": true
                        },
                        {
                          "text": " ，使子组件都能获取得到"
                        }
                      ],
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 5
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/CountriesChart.js",
          "display": true,
          "commit": "1c61d8d36db6c1f04b4214288e24c7057eae2c6e",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "在子组件中通过 Dispatch 修改状态"
                    }
                  ],
                  "id": "On85ZvdU-"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "现在子组件的所有状态都已经提取到了根组件中，而子组件唯一要做的就是在响应用户事件时通过 "
                    },
                    {
                      "text": "dispatch",
                      "code": true
                    },
                    {
                      "text": " 去修改中心状态。思路非常简单："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "先通过 "
                        },
                        {
                          "text": "useContext",
                          "code": true
                        },
                        {
                          "text": " 获取到 "
                        },
                        {
                          "text": "App",
                          "code": true
                        },
                        {
                          "text": " 组件传下来的 "
                        },
                        {
                          "text": "dispatch",
                          "code": true
                        },
                        {
                          "text": " "
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "调用 "
                        },
                        {
                          "text": "dispatch",
                          "code": true
                        },
                        {
                          "text": " ，发起相应的动作（Action）"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "OK，让我们开始动手吧。打开 "
                    },
                    {
                      "text": "src/components/CountriesChart.js",
                      "code": true
                    },
                    {
                      "text": " ，修改代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/CountriesChart.js",
              "commit": "1c61d8d36db6c1f04b4214288e24c7057eae2c6e",
              "hiddenLines": [
                [
                  2,
                  10
                ],
                [
                  24,
                  38
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/HistoryChartGroup.js",
          "display": true,
          "commit": "1c61d8d36db6c1f04b4214288e24c7057eae2c6e",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "按照同样的思路，我们来修改 "
                    },
                    {
                      "text": "src/components/HistoryChartGroup.js",
                      "code": true
                    },
                    {
                      "text": " 组件："
                    }
                  ],
                  "id": "j2lX_L-cl"
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/HistoryChartGroup.js",
              "commit": "1c61d8d36db6c1f04b4214288e24c7057eae2c6e",
              "hiddenLines": [
                [
                  22,
                  41
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/SelectDataKey.js",
          "display": true,
          "commit": "1c61d8d36db6c1f04b4214288e24c7057eae2c6e",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后一公里，修改 "
                    },
                    {
                      "text": "src/components/SelectDataKey.js",
                      "code": true
                    },
                    {
                      "text": " ："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/SelectDataKey.js",
              "commit": "1c61d8d36db6c1f04b4214288e24c7057eae2c6e",
              "hiddenLines": [
                [
                  13,
                  22
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "重构完成，把项目跑起来，应该会发现和上一步的功能分毫不差。"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "如果你熟悉 Redux，会发现我们的重构存在一个小小的遗憾：子组件只能通过传递 Props 的方式获取根组件 "
                        },
                        {
                          "text": "App",
                          "code": true
                        },
                        {
                          "text": " 中的 "
                        },
                        {
                          "text": "state",
                          "code": true
                        },
                        {
                          "text": " 。一个变通之计是通过把 "
                        },
                        {
                          "text": "state",
                          "code": true
                        },
                        {
                          "text": " 也装进 Context 来解决，但如果遇到这种需求，笔者还是建议直接使用 Redux。"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "Redux 还有用吗：Control 与 Context 之争"
                }
              ],
              "id": "aPOWSLfYn"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "听到有些声音说有了 React Hooks，都不需要 Redux 了。那 Redux 到底还有用吗？"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在回答这个问题之前，请允许我先胡思乱想一波。React Hooks 确实强大得可怕，特别是通过优秀的第三方自定义 Hooks 库，几乎能让每个组件都能游刃有余地处理复杂的业务逻辑。反观 Redux，它的核心思想就是将状态和修改状态的操作全部集中起来进行。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "有没有发现，这其实刚好对应了两种管理学思想 Context 和 Control？"
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://imgkr.cn-bj.ufileos.com/4c37c731-1c15-4229-a8c6-ae3fc4980a76.jpg"
            },
            {
              "type": "block-quote",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "管理者需要 Context，not Control。—— 字节跳动创始人和 CEO 张一鸣"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "Control 就是将权力集中起来，员工们只需有条不紊地按照 CEO 的决策执行相应的任务，就像 Redux 中的全局 Store 是”唯一的真相来源“（Single Source of Truth），所有状态和数据流的更新必须经过 Store；而 Context 就是给予各部门、各层级足够的决策权，因为他们所拥有的"
                },
                {
                  "text": "上下文",
                  "bold": true
                },
                {
                  "text": "更充足，"
                },
                {
                  "text": "专业度",
                  "bold": true
                },
                {
                  "text": "也更好，就像 React 中响应特定逻辑的组件具有更充足的上下文，并且可以借助 Hooks ”自给自足“地执行任务，而无需依赖全局的 Store。"
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://imgkr.cn-bj.ufileos.com/7f0ca868-cff1-473c-bde7-75c1bf88a46c.jpg"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "聊到这里，我想你心里已经有自己的答案了。"
                },
                {
                  "text": "如果你想要分享的话，记得在评论区留言哦~",
                  "italic": true
                }
              ]
            },
            {
              "type": "heading-two",
              "children": [
                {
                  "text": "参考资料"
                }
              ],
              "id": "msxy34Woo"
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Sarah Drasner："
                    },
                    {
                      "text": "Understanding the Almighty Reducer",
                      "link": true,
                      "url": "https://css-tricks.com/understanding-the-almighty-reducer/"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Kingsley Silas："
                    },
                    {
                      "text": "Getting to Know the useReducer React Hook",
                      "link": true,
                      "url": "https://css-tricks.com/getting-to-know-the-usereducer-react-hook/"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Kpax Qin："
                    },
                    {
                      "link": true,
                      "url": "https://zhuanlan.zhihu.com/p/27093191",
                      "text": "Redux状态管理之痛点、分析与改良"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "方应杭："
                    },
                    {
                      "text": "尽量使用 useReducer，不要使用 useState（译文）",
                      "link": true,
                      "url": "https://zhuanlan.zhihu.com/p/63385235"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "张一鸣："
                    },
                    {
                      "link": true,
                      "url": "https://bytedance.feishu.cn/docs/doccnNbvesjrrJp13cNU3E3ikkb#7eQLgQ",
                      "text": "CEO 要避免\"理性的自负\", 这错误盖茨、乔布斯都犯过"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "version": "v1",
  "remotes": [
    {
      "name": "gitee",
      "refs": {
        "fetch": "https://gitee.com/tuture/covid-19-with-hooks.git",
        "push": "https://gitee.com/tuture/covid-19-with-hooks.git"
      }
    },
    {
      "name": "origin",
      "refs": {
        "fetch": "https://github.com/tuture-dev/covid-19-with-hooks.git",
        "push": "https://github.com/tuture-dev/covid-19-with-hooks.git"
      }
    }
  ]
}